package com.quyet.superapp.scheduler;

import com.quyet.superapp.dto.BloodInventoryAlertDTO;
import com.quyet.superapp.entity.BloodRequest;
import com.quyet.superapp.entity.User;
import com.quyet.superapp.enums.BloodRequestStatus;
import com.quyet.superapp.enums.RoleEnum;
import com.quyet.superapp.repository.BloodRequestRepository;
import com.quyet.superapp.repository.UserRepository;
import com.quyet.superapp.service.*;
import lombok.RequiredArgsConstructor;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@Component
@RequiredArgsConstructor
public class InventoryAlertScheduler {

    private final BloodService bloodService;
    private final UserRepository userRepository;
    private final NotificationService notificationService;
    private final EmailService emailService;
    private final UrgentDonorRegistryService urgentDonorRegistryService;
    private final BloodRequestRepository requestRepo;

    @Scheduled(cron = "0 0 * * * *") // ch·∫°y m·ªói gi·ªù
    public void autoRejectOverdueRequests() {
        LocalDateTime timeout = LocalDateTime.now().minusHours(24);
        List<BloodRequest> overdueRequests = requestRepo.findUnpaidAndExpiredRequests(timeout);

        for (BloodRequest request : overdueRequests) {
            request.setStatus(BloodRequestStatus.REJECTED);
            request.setCancelReason("T·ª± ƒë·ªông hu·ª∑ do qu√° th·ªùi gian thanh to√°n.");
            requestRepo.save(request);

            emailService.sendEmail(
                    request.getRequester(),                  // ‚úÖ ki·ªÉu User
                    "üõë ƒê∆°n y√™u c·∫ßu m√°u b·ªã hu·ª∑",             // subject
                    "<p>ƒê∆°n m√£ <b>" + request.getRequestCode() + "</b> ƒë√£ b·ªã hu·ª∑ do qu√° th·ªùi gian thanh to√°n.</p>", // content
                    "REQUEST_REJECTED"                       // type (ch·ªâ l√† String ·ªü ƒë√¢y)
            );


            notificationService.createNotification(
                    request.getRequester().getUserId(),
                    "üõë ƒê∆°n y√™u c·∫ßu m√°u b·ªã hu·ª∑",
                    "ƒê∆°n " + request.getRequestCode() + " ƒë√£ b·ªã hu·ª∑ v√¨ kh√¥ng thanh to√°n ƒë√∫ng h·∫°n."
            );

        }
    }



    @Scheduled(fixedRate = 3600000) // M·ªói gi·ªù
    public void autoCheckInventoryAlert() {
        List<BloodInventoryAlertDTO> alerts = bloodService.getAllInventoryStatus().stream()
                .filter(dto -> !"NORMAL".equals(dto.getAlertLevel()))
                .toList();

        if (alerts.isEmpty()) return;

        // ‚úÖ G·ª≠i cho ADMIN & STAFF
        List<User> staffAndAdmins = new ArrayList<>();
        staffAndAdmins.addAll(userRepository.findByRole(RoleEnum.ADMIN));
        staffAndAdmins.addAll(userRepository.findByRole(RoleEnum.STAFF));

        for (User user : staffAndAdmins) {
            String htmlContent = buildEmailContent(alerts);
            emailService.sendEmail(user,
                    "[C·∫£nh b√°o kho m√°u] B√°o c√°o t·ªïng h·ª£p",
                    htmlContent,
                    "INVENTORY_ALERT");

            notificationService.createNotification(
                    user.getUserId(),
                    "üì¢ C√≥ nhi·ªÅu c·∫£nh b√°o kho m√°u",
                    "H·ªá th·ªëng ph√°t hi·ªán nhi·ªÅu lo·∫°i m√°u s·∫Øp thi·∫øu. Ki·ªÉm tra email ƒë·ªÉ bi·∫øt chi ti·∫øt."
            );
        }

        // ‚úÖ G·ª≠i cho ng∆∞·ªùi hi·∫øn m√°u kh·∫©n c·∫•p (ch·ªâ khi CRITICAL)
        boolean hasCritical = alerts.stream()
                .anyMatch(a -> "CRITICAL".equals(a.getAlertLevel()));

        if (hasCritical) {
            List<User> urgentDonors = urgentDonorRegistryService.getVerifiedUrgentDonorsReady();
            for (User donor : urgentDonors) {
                String htmlContent = buildEmailContent(alerts);
                emailService.sendEmail(donor,
                        "ü©∏ Kh·∫©n c·∫•p: Kho m√°u thi·∫øu tr·∫ßm tr·ªçng",
                        htmlContent +
                                "<p>N·∫øu b·∫°n s·∫µn s√†ng hi·∫øn m√°u, vui l√≤ng ƒë·∫øn trung t√¢m hi·∫øn m√°u g·∫ßn nh·∫•t.</p>",
                        "URGENT_DONOR_ALERT");
            }
        }
    }

    private String buildEmailContent(List<BloodInventoryAlertDTO> alerts) {
        StringBuilder content = new StringBuilder();
        content.append("<h3>ü©∏ B√°o c√°o c·∫£nh b√°o kho m√°u</h3><ul>");

        for (BloodInventoryAlertDTO alert : alerts) {
            String prefix = switch (alert.getAlertLevel()) {
                case "CRITICAL" -> "‚ùó NGUY K·ªäCH";
                case "WARNING" -> "‚ö†Ô∏è C·∫£nh b√°o";
                default -> "‚ÑπÔ∏è";
            };

            content.append(String.format(
                    "<li>%s: <b>%s - %s</b> c√≤n l·∫°i <span style='color:red;'>%dml</span></li>",
                    prefix,
                    alert.getBloodType(),
                    alert.getComponent(),
                    alert.getQuantityMl()
            ));
        }

        content.append("</ul><p>Vui l√≤ng ki·ªÉm tra ngay ƒë·ªÉ x·ª≠ l√Ω k·ªãp th·ªùi.</p>");
        return content.toString();
    }
}
