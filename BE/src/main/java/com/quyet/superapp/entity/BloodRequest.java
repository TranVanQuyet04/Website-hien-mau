//package com.quyet.superapp.entity;
//
//import com.quyet.superapp.enums.RequestStatus;
//import jakarta.persistence.*;
//import lombok.*;
//
//import java.time.LocalDateTime;
//
//@Entity
//@Table(name = "BloodRequests")
//@Data
//@NoArgsConstructor
//@AllArgsConstructor
//@Builder
//public class BloodRequest {
//
//    @Id
//    @GeneratedValue(strategy = GenerationType.IDENTITY)
//    @Column(name = "BloodRequestID")
//    private Long bloodRequestId;
//
//    @Column(name = "patient_record_code", unique = true, length = 20)
//    private String patientRecordCode;
//
//    // --- Li√™n k·∫øt v·ªõi b√°c sƒ© ph·ª• tr√°ch ---
//    @ManyToOne
//    @JoinColumn(name = "DoctorId")
//    private User doctor;
//
//    // --- Li√™n k·∫øt v·ªõi b·ªánh nh√¢n ·∫©n danh (n·∫øu c√≥) ---
//    @ManyToOne(fetch = FetchType.LAZY)
//    @JoinColumn(name = "PatientUserId")
//    private User patient;
//
//    // --- Ng∆∞·ªùi g·ª≠i y√™u c·∫ßu ---
//    @Column(name = "RequesterName", columnDefinition = "NVARCHAR(100)")
//    private String requesterName;
//
//    @Column(name = "RequesterPhone", columnDefinition = "NVARCHAR(20)")
//    private String requesterPhone;
//
//    // --- Th√¥ng tin b·ªánh nh√¢n ---
//    @Column(name = "PatientName", columnDefinition = "NVARCHAR(100)")
//    private String patientName;
//
//    @Column(name = "PatientPhone", columnDefinition = "NVARCHAR(20)")
//    private String patientPhone;
//
//    @Column(name = "PatientAge")
//    private Integer patientAge;
//
//    @Column(name = "PatientGender", columnDefinition = "NVARCHAR(10)")
//    private String patientGender;
//
//    @Column(name = "PatientWeight")
//    private Double patientWeight;
//
//    @Column(name = "PatientBloodGroup", columnDefinition = "NVARCHAR(5)")
//    private String patientBloodGroup;
//
//    // --- Truy·ªÅn m√°u ---
//    @ManyToOne
//    @JoinColumn(name = "BloodType")
//    private BloodType bloodType;
//
//    @ManyToOne
//    @JoinColumn(name = "ComponentID")
//    private BloodComponent component;
//
//    @Column(name = "QuantityBag")
//    private Integer quantityBag;
//
//    @Column(name = "QuantityML")
//    private Integer quantityMl;
//
//    // üßë‚Äçüíº Li√™n k·∫øt ng∆∞·ªùi g·ª≠i (staff)
//    @ManyToOne(fetch = FetchType.LAZY)
//    @JoinColumn(name = "RequesterId")
//    private User requester;
//
//
//    @Column(name = "UrgencyLevel", columnDefinition = "NVARCHAR(20)")
//    private String urgencyLevel;
//
//    @Column(name = "TriageLevel", columnDefinition = "NVARCHAR(20)")
//    private String triageLevel;
//
//    @Column(name = "Reason", columnDefinition = "NVARCHAR(255)")
//    private String reason;
//
//    @Column(name = "NeededAt")
//    private LocalDateTime neededAt;
//
//    // --- L·ªãch s·ª≠ y khoa ---
//    @Column(name = "CrossmatchRequired")
//    private Boolean crossmatchRequired;
//
//    @Column(name = "HasTransfusionHistory")
//    private Boolean hasTransfusionHistory;
//
//    @Column(name = "HasReactionHistory")
//    private Boolean hasReactionHistory;
//
//    @Column(name = "IsPregnant")
//    private Boolean isPregnant;
//
//    @Column(name = "HasAntibodyIssue")
//    private Boolean hasAntibodyIssue;
//
//    // --- Ghi ch√∫ & c·∫£nh b√°o ---
//    @Column(name = "WarningNote", columnDefinition = "NVARCHAR(255)")
//    private String warningNote;
//
//    @Column(name = "SpecialNote", columnDefinition = "NVARCHAR(255)")
//    private String specialNote;
//
//    // --- Tr·∫°ng th√°i & metadata ---
//    @Enumerated(EnumType.STRING)
//    @Column(name = "Status", columnDefinition = "NVARCHAR(20)")
//    private RequestStatus status;
//
//
//    @Column(name = "ConfirmedVolumeML")
//    private Integer confirmedVolumeMl;
//
//    @Column(name = "IsUnmatched")
//    private Boolean isUnmatched;
//
//    @Column(name = "CodeRedID")
//    private Long codeRedId;
//
//    @Column(name = "EmergencyNote", columnDefinition = "NVARCHAR(255)")
//    private String emergencyNote;
//
//    @Column(name = "ApprovedBy", columnDefinition = "NVARCHAR(50)")
//    private String approvedBy;
//
//    @Column(name = "ApprovedAt")
//    private LocalDateTime approvedAt;
//
//    @Column(name = "CreatedAt")
//    private LocalDateTime createdAt;
//
//    @PrePersist
//    public void onCreate() {
//        this.createdAt = LocalDateTime.now();
//    }
//
//    @Column(name = "UpdatedAt")
//    private LocalDateTime updatedAt;
//
//    @PreUpdate
//    public void onUpdate() {
//        this.updatedAt = LocalDateTime.now();
//    }
//
//
//    @ManyToOne(fetch = FetchType.LAZY)
//    @JoinColumn(name = "suspected_patient_id")
//    private User suspectedPatient;
//
//
//    @Column(name = "payment_status", columnDefinition = "NVARCHAR(20)")
//    private String paymentStatus;
//
//    @Column(name = "total_amount")
//    private Integer totalAmount;
//
//    @Column(name = "deferred_payment")
//    private Boolean deferredPayment;
//
//    @Column(name = "deferred_payment_reason", columnDefinition = "NVARCHAR(255)")
//    private String deferredPaymentReason;
//
//    @Column(name = "cancel_reason", columnDefinition = "NVARCHAR(255)")
//    private String cancelReason;
//
//    @Column(name = "RequestCode", unique = true, length = 30)
//    private String requestCode;
//
//
//}


package com.quyet.superapp.entity;

import com.quyet.superapp.enums.BloodRequestStatus;
import com.quyet.superapp.enums.PaymentStatus;
import com.quyet.superapp.enums.UrgencyLevel;
import jakarta.persistence.*;
import lombok.*;
import com.quyet.superapp.enums.UrgencyLevel;
import com.quyet.superapp.entity.BloodType;

import java.time.LocalDateTime;

@Entity
@Table(name = "BloodRequests")
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class BloodRequest {

    // üîë ID t·ª± tƒÉng duy nh·∫•t
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    // üë§ B·ªánh nh√¢n li√™n k·∫øt
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "patient_id", nullable = false)
    private Patient patient;

    // üßë‚Äç‚öïÔ∏è Nh√¢n vi√™n g·ª≠i ƒë∆°n
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "requester_id", nullable = false)
    private User requester;

    // üë®‚Äç‚öïÔ∏è B√°c sƒ© ph·ª• tr√°ch
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "doctor_id", nullable = false)
    private User doctor;

    // ü©∏ Nh√≥m m√°u & th√†nh ph·∫ßn m√°u
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "blood_type_id", nullable = false)
    private BloodType bloodType;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "component_id", nullable = false)
    private BloodComponent component;

    // ü©∏ Nh√≥m m√°u mong mu·ªën (n·∫øu c√≥)
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "expected_blood_type_id")
    private BloodType expectedBloodType;

    // üìù M√£ n·ªôi b·ªô, t·ª± sinh b√™n Service
    private String patientRecordCode;  // M√£ h·ªì s∆° b·ªánh nh√¢n
    private String requestCode;        // M√£ ƒë∆°n truy·ªÅn m√°u

    private String reason;             // L√Ω do truy·ªÅn m√°u
    @Enumerated(EnumType.STRING)
    @Column(name = "urgency_level") // ƒë·ªÉ r√µ r√†ng, mapping t√™n c·ªôt
    private UrgencyLevel urgencyLevel;

    private String triageLevel;        // M·ª©c ƒë·ªô ∆∞u ti√™n

    private Integer quantityBag;       // S·ªë t√∫i m√°u y√™u c·∫ßu
    private Integer quantityMl;        // S·ªë ml m√°u (n·∫øu c√≥)

    private Integer confirmedVolumeMl;   // ‚úÖ sau khi truy·ªÅn th·ª±c t·∫ø
    private String emergencyNote;        // ‚úÖ l√Ω do c·∫•p c·ª©u c·ª• th·ªÉ
    private Integer totalAmount;         // ‚úÖ chi ph√≠ d·ªãch v·ª•

    private LocalDateTime neededAt;      // ‚úÖ th·ªùi gian c·∫ßn m√°u
    private LocalDateTime approvedAt;    // ‚úÖ th·ªùi gian duy·ªát
    private LocalDateTime createdAt;     // ‚úÖ th·ªùi gian t·∫°o ƒë∆°n

    // ‚öôÔ∏è Th√¥ng tin y t·∫ø b·ªï sung
    private Boolean crossmatchRequired;
    private Boolean hasTransfusionHistory;
    private Boolean hasReactionHistory;
    private Boolean isPregnant;
    private Boolean hasAntibodyIssue;

    private String warningNote;
    private String specialNote;
    // entity BloodRequest
    private String internalPriorityCode;


    private Boolean deferredPayment;         // ‚úÖ c√≥ cho n·ª£ chi ph√≠ kh√¥ng
    private String deferredPaymentReason;    // ‚úÖ l√Ω do cho n·ª£

    private Boolean isUnmatched;             // ‚úÖ truy·ªÅn kh√¥ng t∆∞∆°ng th√≠ch
    private Long codeRedId;                  // ‚úÖ m√£ ƒë·ªãnh danh c·∫•p c·ª©u n·∫øu c√≥

    @Enumerated(EnumType.STRING)
    private BloodRequestStatus status;       // Tr·∫°ng th√°i ƒë∆°n

    private String requesterName;            // ‚úÖ t√™n ng∆∞·ªùi g·ª≠i ƒë∆°n (hi·ªÉn th·ªã)
    private String requesterPhone;           // ‚úÖ s·ªë ƒëi·ªán tho·∫°i g·ª≠i ƒë∆°n

    @Enumerated(EnumType.STRING)
    @Column(name = "payment_status")
    private PaymentStatus paymentStatus;     // ‚úÖ tr·∫°ng th√°i thanh to√°n

    private LocalDateTime updatedAt;
    private String cancelReason;             // ‚úÖ l√Ω do t·ª´ ch·ªëi/h·ªßy
    private LocalDateTime cancelledAt;       // ‚úÖ th·ªùi gian h·ªßy


}

