package com.quyet.superapp.service;

import com.quyet.superapp.config.jwt.JwtTokenProvider;
import com.quyet.superapp.config.jwt.UserPrincipal;
import com.quyet.superapp.constant.MessageConstants;
import com.quyet.superapp.dto.*;
import com.quyet.superapp.entity.*;
import com.quyet.superapp.entity.address.Address;
import com.quyet.superapp.entity.address.Ward;
import com.quyet.superapp.enums.EmailType;
import com.quyet.superapp.enums.RoleEnum;
import com.quyet.superapp.exception.MemberException;
import com.quyet.superapp.exception.MultiFieldException;
import com.quyet.superapp.exception.ResourceNotFoundException;
import com.quyet.superapp.mapper.AddressMapper;
import com.quyet.superapp.mapper.UserMapper;
import com.quyet.superapp.repository.*;
import com.quyet.superapp.repository.address.AddressRepository;
import com.quyet.superapp.repository.address.WardRepository;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.util.*;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j
public class UserService {

    private final UserRepository userRepository;
    private final RoleRepository roleRepository;
    private final BCryptPasswordEncoder passwordEncoder;
    private final AuthenticationManager authenticationManager;
    private final JwtTokenProvider tokenProvider;
    private final AddressRepository addressRepository;
    private final WardRepository wardRepository;
    private final UserProfileRepository userProfileRepository;
    private final AddressMapper addressMapper;
    private final DonorProfileRepository donorProfileRepository;
    private final RedisOtpService redisOtpService;
    private final EmailService emailService;

    /**
     * ƒêƒÉng nh·∫≠p v√† tr·∫£ v·ªÅ LoginResponseDTO g·ªìm JWT
     */
    public ResponseEntity<?> login(LoginRequestDTO loginRequest) {
        try {
            Authentication authentication = authenticationManager.authenticate(
                    new UsernamePasswordAuthenticationToken(
                            loginRequest.getUsername(),
                            loginRequest.getPassword()
                    )
            );
            SecurityContextHolder.getContext().setAuthentication(authentication);

            User user = userRepository.findByUsername(loginRequest.getUsername())
                    .orElseThrow(() -> new RuntimeException("T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i"));

            // T·∫°o token JWT
            String jwt = tokenProvider.createToken(user.getUsername(), user.getUserId());

            // Build response DTO
            LoginResponseDTO loginResponse = new LoginResponseDTO(
                    user.getUserId(),
                    user.getUsername(),
                    user.getEmail(),
                    user.getRole().getName(),
                    user.isEnable(),
                    jwt
            );
            return ResponseEntity.ok(loginResponse);

        } catch (AuthenticationException e) {
            log.error("Authentication failed: {}", e.getMessage());
            return ResponseEntity.badRequest().body("T√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng");
        }
    }


    private void applyInsuranceInfo(UserProfile profile, Boolean hasInsurance, String cardNumber, LocalDate validTo) {
        profile.setHasInsurance(hasInsurance);
        profile.setInsuranceCardNumber(cardNumber);
        profile.setInsuranceValidTo(validTo);
    }

    public ResponseEntity<ApiResponseDTO<?>> logout(UserPrincipal principal) {
        log.info("üëã Ng∆∞·ªùi d√πng {} ƒë√£ logout", principal.getUsername());
        return ResponseEntity.ok(new ApiResponseDTO<>(true, "ƒêƒÉng xu·∫•t th√†nh c√¥ng"));
    }



    /**
     * ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi
     */
    @Transactional
    public ResponseEntity<?> register(RegisterRequestDTO request) {
        try {
            // Ki·ªÉm tra tr√πng th√¥ng tin
            if (userRepository.existsByUsername(request.getUsername())) {
                log.warn("T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i: {}", request.getUsername());
                return ResponseEntity.badRequest().body(new ApiResponseDTO<>(false, MessageConstants.USERNAME_EXISTS));
            }
            if (userRepository.existsByEmail(request.getContactInfo().getEmail())) {
                log.warn("Email ƒë√£ t·ªìn t·∫°i (User): {}", request.getContactInfo().getEmail());
                return ResponseEntity.badRequest().body(new ApiResponseDTO<>(false, MessageConstants.EMAIL_EXISTS));
            }
            if (userProfileRepository.existsByCitizenId(request.getCccd())) {
                log.warn("CCCD ƒë√£ t·ªìn t·∫°i: {}", request.getCccd());
                return ResponseEntity.badRequest().body(new ApiResponseDTO<>(false, MessageConstants.CCCD_EXISTS));
            }
            if (userProfileRepository.existsByEmail(request.getContactInfo().getEmail())) {
                log.warn("Email ƒë√£ t·ªìn t·∫°i (Profile): {}", request.getContactInfo().getEmail());
                return ResponseEntity.badRequest().body(new ApiResponseDTO<>(false, MessageConstants.EMAIL_PROFILE_EXISTS));
            }

            Role role = roleRepository.findByName(
                    String.valueOf(RoleEnum.valueOf(Optional.ofNullable(request.getRole()).map(String::toUpperCase).orElse("MEMBER")))
            ).orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y vai tr√≤"));

            Address address = null;
            if (request.getAddress() != null && request.getAddress().getWardId() != null) {
                Ward ward = wardRepository.findById(request.getAddress().getWardId())
                        .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ph∆∞·ªùng/x√£ ph√π h·ª£p"));

                address = new Address();
                address.setAddressStreet(request.getAddress().getAddressStreet());
                address.setWard(ward);
                addressRepository.save(address);
            }

            // T·∫°o user
            User user = new User();
            user.setUsername(request.getUsername());
            user.setEmail(request.getContactInfo().getEmail());
            user.setPassword(passwordEncoder.encode(request.getPassword()));
            user.setEnable(true);
            user.setRole(role);

            UserProfile profile = new UserProfile();
            profile.setUser(user);
            profile.setFullName(request.getFullName());
            profile.setDob(request.getDob());
            profile.setGender(request.getGender());
            profile.setPhone(request.getContactInfo().getPhone());
            profile.setEmail(request.getContactInfo().getEmail());
            profile.setCitizenId(request.getCccd());
            profile.setOccupation(request.getOccupation());
            profile.setWeight(request.getWeight());
            profile.setHeight(request.getHeight());
            profile.setAddress(address);
            profile.setLocation(address != null ? address.getAddressStreet() : null);

            user.setUserProfile(profile);
            userRepository.save(user);

            return ResponseEntity.ok("ƒêƒÉng k√Ω th√†nh c√¥ng");

        } catch (Exception e) {
            log.error("ƒêƒÉng k√Ω th·∫•t b·∫°i cho username [{}]: {}", request.getUsername(), e.getMessage());
            return ResponseEntity.internalServerError().body("ƒêƒÉng k√Ω th·∫•t b·∫°i");
        }
    }
    public String sendResetPasswordOtp(String email) {
        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> new RuntimeException("Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng."));

        String otp = redisOtpService.generateOtp(email);

        String displayName = (user.getUserProfile() != null && user.getUserProfile().getFullName() != null)
                ? user.getUserProfile().getFullName()
                : user.getUsername();

        // ‚úÖ N·ªôi dung email
        String content = "<p>Xin ch√†o <b>" + displayName + "</b>,</p>"
                + "<p>B·∫°n ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa m√¨nh.</p>"
                + "<p>M√£ OTP c·ªßa b·∫°n l√†: <b style='color:red; font-size: 18px'>" + otp + "</b></p>"
                + "<p>M√£ OTP ch·ªâ c√≥ hi·ªáu l·ª±c trong <b>5 ph√∫t</b>. Vui l√≤ng kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai.</p>"
                + "<br><p>Tr√¢n tr·ªçng,<br>H·ªá th·ªëng H·ªó tr·ª£ Hi·∫øn m√°u</p>";

        // ‚úÖ G·ª≠i email
        emailService.sendEmail(user, "M√£ OTP ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u", content, EmailType.RESET_PASSWORD.name());

        // ‚úÖ Tr·∫£ v·ªÅ OTP ƒë·ªÉ hi·ªÉn th·ªã trong response khi test
        return otp;
    }

    public void resetPassword(String email, String otp, String newPassword) {
        if (!redisOtpService.validateOtp(email, otp)) {
            throw new RuntimeException("M√£ OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.");
        }

        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi email n√†y."));

        user.setPassword(passwordEncoder.encode(newPassword));
        userRepository.save(user);

        String content = "<p>B·∫°n ƒë√£ ƒë·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng.</p>";
        emailService.sendEmail(user, "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng", content, EmailType.SYSTEM.name());
    }

    public void changePassword(UserPrincipal principal, ChangePasswordDTO dto) {
        User user = userRepository.findById(principal.getUserId())
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"));

        if (!dto.getNewPassword().equals(dto.getConfirmPassword())) {
            throw new RuntimeException("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp.");
        }

        user.setPassword(passwordEncoder.encode(dto.getNewPassword()));
        userRepository.save(user);

        String content = "<p>B·∫°n v·ª´a ƒë·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng.</p>";
        emailService.sendEmail(user, "ƒê·ªïi m·∫≠t kh·∫©u", content, EmailType.SYSTEM.name());
    }


    // ‚úÖ H√†m validate tr√πng l·∫∑p cho Member ƒëƒÉng k√Ω
    private void validateRegisterFields(RegisterRequestDTO request) {
        Map<String, String> errors = new HashMap<>();

        if (userRepository.existsByUsername(request.getUsername())) {
            errors.put("username", "T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i");
        }

        if (userRepository.existsByEmail(request.getEmail())) {
            errors.put("email", "Email ƒë√£ t·ªìn t·∫°i");
        }

        if (userProfileRepository.existsByPhone(request.getPhone())) {
            errors.put("phone", "SƒêT ƒë√£ t·ªìn t·∫°i");
        }

        if (request.getCitizenId() != null) {
            String normalizedCitizenId = request.getCitizenId().trim(); // ‚úÖ chu·∫©n h√≥a
            if (userProfileRepository.existsByCitizenId(normalizedCitizenId)) {
                errors.put("citizenId", "CCCD ƒë√£ t·ªìn t·∫°i");
            }
        }
        if (request.getInsuranceCardNumber() != null) {
            String normalizedInsurance = request.getInsuranceCardNumber().trim();
            if (userProfileRepository.existsByInsuranceCardNumber(normalizedInsurance)) {
                errors.put("insuranceCardNumber", "S·ªë th·∫ª BHYT ƒë√£ t·ªìn t·∫°i");
            }
        }


        if (!errors.isEmpty()) {
            log.warn("‚ùå ƒêƒÉng k√Ω th·∫•t b·∫°i do tr√πng l·∫∑p: {}", errors); // ‚úÖ Logging r√µ r√†ng
            throw new MultiFieldException("ƒêƒÉng k√Ω t√†i kho·∫£n th·∫•t b·∫°i", errors);
        }
    }


    // ‚úÖ L·∫•y danh s√°ch b√°c sƒ©
    public List<UserDTO> getAllDoctors() {
        return userRepository.findDoctors().stream()
                .map(UserMapper::toDTO)
                .collect(Collectors.toList());
    }

    // ‚úÖ Admin t·∫°o t√†i kho·∫£n staff/doctor
    @Transactional
    public void createUserByAdmin(AdminCreateUserRequestDTO dto) {
        Map<String, String> errors = new HashMap<>();

        if (userRepository.existsByUsername(dto.getUsername())) {
            errors.put("username", "T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i");
        }
        if (userRepository.existsByEmail(dto.getContactInfo().getEmail())) {
            errors.put("email", "Email ƒë√£ t·ªìn t·∫°i");
        }
        if (userProfileRepository.existsByCitizenId(dto.getCitizenId())) {
            errors.put("citizenId", "CCCD ƒë√£ t·ªìn t·∫°i");
        }
        if (userProfileRepository.existsByPhone(dto.getContactInfo().getPhone())) {
            errors.put("phone", "SƒêT ƒë√£ t·ªìn t·∫°i");
        }

        if (!errors.isEmpty()) {
            throw new MultiFieldException("T·∫°o t√†i kho·∫£n th·∫•t b·∫°i", errors);
        }

        String roleName = (dto.getStaffPosition() == null || dto.getStaffPosition().isBlank()) ? "MEMBER" : "STAFF";
        RoleEnum roleEnum = RoleEnum.valueOf(roleName);
        Role role = roleRepository.findByName(String.valueOf(roleEnum))
                .orElseThrow(() -> new ResourceNotFoundException("Vai tr√≤ " + roleName + " kh√¥ng t·ªìn t·∫°i"));

        User user = new User();
        user.setUsername(dto.getUsername());
        user.setPassword(passwordEncoder.encode(dto.getPassword()));
        user.setEmail(dto.getContactInfo().getEmail());
        user.setEnable(true);
        user.setRole(role);

        Address address = null;
        if (dto.getAddress() != null) {
            address = addressMapper.toEntity(dto.getAddress());
            addressRepository.save(address);
        }

        UserProfile profile = new UserProfile();
        profile.setUser(user);
        profile.setFullName(dto.getFullName());
        profile.setDob(dto.getDob());
        profile.setGender(dto.getGender());
        profile.setPhone(dto.getContactInfo().getPhone());
        profile.setEmail(dto.getContactInfo().getEmail());
        profile.setCitizenId(dto.getCitizenId());
        profile.setWeight(dto.getWeight());
        profile.setHeight(dto.getHeight());
        profile.setLocation(dto.getLocation());
        profile.setStaffPosition(dto.getStaffPosition());
        profile.setAddress(address);

        user.setUserProfile(profile);
        userRepository.save(user);

        if ("MEMBER".equalsIgnoreCase(roleName)) {
            DonorProfile donorProfile = new DonorProfile();
            donorProfile.setUser(user);
            donorProfileRepository.save(donorProfile);
        }
    }

    public List<UserDTO> getAllStaffAndDoctors() {
        return userRepository.findStaffAndDoctors()
                .stream()
                .map(UserMapper::toDTO)
                .collect(Collectors.toList());
    }

    public List<UserDTO> getByStaffPosition(String staffPosition) {
        return userRepository.findByStaffPosition(staffPosition)
                .stream()
                .map(UserMapper::toDTO)
                .collect(Collectors.toList());
    }
}
