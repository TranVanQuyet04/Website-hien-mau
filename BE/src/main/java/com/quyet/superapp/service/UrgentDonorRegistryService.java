package com.quyet.superapp.service;

import com.quyet.superapp.enums.BloodComponentType;
import com.quyet.superapp.mapper.NearbyDonorMapper;
import com.quyet.superapp.mapper.UrgentDonorSearchMapper;
import com.quyet.superapp.util.HospitalLocation;
import org.springframework.beans.factory.annotation.Value; // ‚úÖ ƒê√∫ng!
import org.springframework.data.crossstore.ChangeSetPersister;
import org.springframework.transaction.annotation.Transactional;
import com.quyet.superapp.dto.*;
import com.quyet.superapp.dto.VerifiedUrgentDonorDTO;
import com.quyet.superapp.entity.*;
import com.quyet.superapp.entity.address.Address;
import com.quyet.superapp.enums.DonorReadinessLevel;
import com.quyet.superapp.exception.ResourceNotFoundException;
import com.quyet.superapp.mapper.UrgentDonorListItemMapper;
import com.quyet.superapp.mapper.UrgentDonorMapper;
import com.quyet.superapp.repository.*;
import com.quyet.superapp.util.GeoUtils;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.format.DateTimeFormatter;


import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;
import java.time.temporal.ChronoUnit;

@Service
@RequiredArgsConstructor
public class UrgentDonorRegistryService {

    private final UserRepository userRepository;
    private final BloodTypeRepository bloodTypeRepository;
    private final UrgentDonorRegistryRepository urgentDonorRegistryRepository;
    private final UserProfileRepository userProfileRepository;
    private final AddressService addressService;
    private final UrgentDonorMapper urgentDonorMapper;
    private final EmailService emailService;
    private final UrgentDonorRegistryRepository urgentDonorRegistryRepo;
    private final UrgentDonorListItemMapper urgentDonorListItemMapper;
    private final UrgentDonorSearchMapper mapper;
    @Autowired
    private ReadinessChangeLogRepository readinessChangeLogRepository;
    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(UrgentDonorRegistryService.class);


    @Autowired
    private NearbyDonorMapper nearbyDonorMapper;

    @Value("${hospital.latitude}")
    private double hospitalLat;

    @Value("${hospital.longitude}")
    private double hospitalLng;


    private final DonationRepository donationRepository;


    private final UrgentDonorRegistryRepository urgentDonorRepository;

    private final UrgentDonorSearchMapper urgentDonorSearchMapper;
    private final BloodComponentRepository componentRepository;
    private final UrgentDonorRegistryRepository donorRegistryRepository;
    private final BloodTypeService bloodTypeService;
    private final DonationService donationService;
    private final BloodComponentRepository bloodComponentRepository;



    public List<UrgentDonorMatchResultDTO> searchUrgentDonors(UrgentDonorSearchRequestDTO request) {
        // T√¨m nh√≥m m√°u ng∆∞·ªùi nh·∫≠n
        BloodType receiverType = bloodTypeRepository.findById(request.getReceiverBloodTypeId())
                .orElseThrow(() -> new NoSuchElementException("Blood type not found"));

        // T√¨m th√†nh ph·∫ßn m√°u c·∫ßn
        BloodComponent component = bloodComponentRepository
                .findByBloodComponentIdAndIsActiveTrue(request.getComponentId())
                .orElseThrow(() -> new RuntimeException("Component not found"));

        // L·∫•y t·∫•t c·∫£ ng∆∞·ªùi hi·∫øn m√°u ƒë√£ x√°c minh c√≥ s·∫µn th√†nh ph·∫ßn m√°u n√†y
        List<UrgentDonorRegistry> allDonors =
                donorRegistryRepository.findAllVerifiedWithComponent(component.getBloodComponentId());

        List<UrgentDonorMatchResultDTO> result = new ArrayList<>();

        for (UrgentDonorRegistry reg : allDonors) {
            // B·ªè qua n·∫øu thi·∫øu user, profile ho·∫∑c bloodType
            if (reg.getDonor() == null || reg.getDonor().getUserProfile() == null || reg.getDonor().getProfile() == null) {
                continue;
            }

            UserProfile profile = reg.getDonor().getUserProfile();
            Double donorLat = profile.getLatitude();
            Double donorLng = profile.getLongitude();

            // B·ªè qua n·∫øu thi·∫øu t·ªça ƒë·ªô
            if (donorLat == null || donorLng == null) {
                continue;
            }

            BloodType donorType = reg.getDonor().getProfile().getBloodType();
            if (donorType == null) continue;

            // Ki·ªÉm tra t∆∞∆°ng th√≠ch nh√≥m m√°u
            boolean compatible = bloodTypeService.isCompatible(donorType, receiverType);

            // T√≠nh kho·∫£ng c√°ch t·ªõi b·ªánh vi·ªán
            double distance = GeoUtils.calculateDistanceKm(
                    donorLat, donorLng,
                    HospitalLocation.LATITUDE,
                    HospitalLocation.LONGITUDE
            );

            // Ngo√†i b√°n k√≠nh t√¨m ki·∫øm th√¨ b·ªè qua
            if (distance > request.getRadiusKm()) continue;

            // Ki·ªÉm tra kh·∫£ nƒÉng hi·∫øn th√†nh ph·∫ßn m√°u
            boolean canDonateNow = donationService.canDonateNow(
                    reg.getDonor().getUserId(), component.getBloodComponentId());

            Integer daysLeft = donationService.getDaysUntilRecover(
                    reg.getDonor().getUserId(), component.getBloodComponentId());

            // T·∫°o DTO k·∫øt qu·∫£
            result.add(UrgentDonorMatchResultDTO.builder()
                    .id(reg.getId())
                    .fullName(profile.getFullName())
                    .phone(profile.getPhone())
                    .address(profile.getFullAddressString())
                    .bloodType(donorType.getDescription())
                    .component(component.getName())
                    .distance(Math.round(distance * 10.0) / 10.0)
                    .readiness(reg.getReadinessLevel().name())
                    .verified(true)
                    .compatible(compatible)
                    .canDonateNow(canDonateNow)
                    .daysUntilRecover(canDonateNow ? null : daysLeft)
                    .build());
        }

        // S·∫Øp x·∫øp theo kho·∫£ng c√°ch g·∫ßn nh·∫•t
        result.sort(Comparator.comparing(UrgentDonorMatchResultDTO::getDistance));

        return result;
    }






    public List<UrgentDonorSearchResultDTO> searchNearbyDonors(Long bloodTypeId, Long componentId, double maxDistanceKm) {
        List<UrgentDonorRegistry> candidates = urgentDonorRegistryRepository
                .findByBloodType_BloodTypeIdAndBloodComponent_BloodComponentIdAndIsVerifiedTrueAndIsAvailableTrue(bloodTypeId, componentId);

        double hospitalLat = HospitalLocation.LATITUDE;
        double hospitalLng = HospitalLocation.LONGITUDE;

        return candidates.stream()
                .map(donor -> {
                    double distance = GeoUtils.calculateDistanceKm(hospitalLat, hospitalLng, donor.getLatitude(), donor.getLongitude());
                    return new Object[]{donor, distance};
                })
                .filter(arr -> (double) arr[1] <= maxDistanceKm)
                .sorted(Comparator.comparingDouble(arr -> (double) arr[1])) // ‚úÖ sort theo kho·∫£ng c√°ch
                .map(arr -> urgentDonorSearchMapper.toDTO((UrgentDonorRegistry) arr[0], (double) arr[1]))
                .collect(Collectors.toList());
    }




    public List<NearbyDonorDTO> findNearbyVerifiedDonors(BloodRequest request, double radiusKm) {
        if (request == null || request.getBloodType() == null) {
            throw new IllegalArgumentException("BloodRequest ho·∫∑c BloodType kh√¥ng h·ª£p l·ªá.");
        }

        Long bloodTypeId = request.getBloodType().getBloodTypeId();

        // B·ªánh vi·ªán ch·ªâ c√≥ 1 v·ªã tr√≠ c·ªë ƒë·ªãnh
        double hospitalLat = HospitalLocation.LATITUDE;
        double hospitalLng = HospitalLocation.LONGITUDE;

        return findNearbyVerifiedDonors(hospitalLat, hospitalLng, bloodTypeId, radiusKm);
    }


    public List<NearbyDonorDTO> findNearbyVerifiedDonors(double radiusKm) {
        return findNearbyVerifiedDonors(hospitalLat, hospitalLng, null, radiusKm);
    }

    public List<NearbyDonorDTO> findNearbyVerifiedDonors(
            double lat,
            double lng,
            Long bloodTypeFilter,
            double maxDistanceKm
    ) {
        return urgentDonorRegistryRepo.findAllVerified().stream()
                .map(donor -> {
                    Double donorLat = donor.getLatitude();
                    Double donorLng = donor.getLongitude();

                    // B·ªè qua n·∫øu thi·∫øu t·ªça ƒë·ªô
                    if (donorLat == null || donorLng == null) return null;

                    double distance = GeoUtils.calculateDistanceKm(lat, lng, donorLat, donorLng);
                    if (distance > maxDistanceKm) return null;

                    // üëâ L·∫•y ID v√† t√™n nh√≥m m√°u ng∆∞·ªùi hi·∫øn
                    BloodType bloodType = donor.getBloodType();
                    Long donorBloodTypeId = (bloodType != null) ? bloodType.getBloodTypeId() : null;
                    String donorBloodType = (bloodType != null) ? bloodType.getDescription() : "Kh√¥ng r√µ";

                    // N·∫øu l·ªçc nh√≥m m√°u v√† kh√¥ng kh·ªõp th√¨ b·ªè qua
                    if (bloodTypeFilter != null && !bloodTypeFilter.equals(donorBloodTypeId)) {
                        return null;
                    }

                    User user = donor.getDonor();
                    UserProfile profile = user.getUserProfile();

                    String fullName = (profile != null) ? profile.getFullName() : "Kh√¥ng r√µ";
                    String phone = (profile != null && profile.getPhone() != null) ? profile.getPhone() : "Kh√¥ng r√µ";
                    String address = (profile != null && profile.getAddress() != null)
                            ? profile.getAddress().getAddressStreet()
                            : "Kh√¥ng r√µ";

                    String readiness = donor.getReadinessLevel() != null
                            ? donor.getReadinessLevel().name()
                            : "UNKNOWN";

                    // ü©∏ Truy xu·∫•t l·∫ßn hi·∫øn g·∫ßn nh·∫•t v√† t√≠nh to√°n h·ªìi ph·ª•c
                    Donation lastDonation = donationRepository.findTopByUser_UserIdOrderByDonationDateDesc(user.getUserId());

                    LocalDate lastDate = null;
                    LocalDate nextDate = null;
                    String componentName = "Kh√¥ng r√µ";
                    boolean isEligible = false;
                    String recoveryStatus = "‚ùì Kh√¥ng r√µ";

                    if (lastDonation != null && lastDonation.getBloodComponent() != null) {
                        BloodComponentType type = lastDonation.getBloodComponent().getType();
                        if (type != null && lastDonation.getDonationDate() != null) {
                            lastDate = lastDonation.getDonationDate().toLocalDate();
                            nextDate = lastDate.plusDays(type.getRecoveryDays());
                            componentName = type.getDescription();

                            if (!nextDate.isAfter(LocalDate.now())) {
                                isEligible = true;
                                recoveryStatus = "‚úÖ ƒê·ªß ƒëi·ªÅu ki·ªán";
                            } else {
                                long daysLeft = ChronoUnit.DAYS.between(LocalDate.now(), nextDate);
                                recoveryStatus = "‚ùå C√≤n " + daysLeft + " ng√†y m·ªõi h·ªìi ph·ª•c";
                            }
                        }
                    }

                    // ‚úÖ T·∫°o DTO tr·∫£ v·ªÅ
                    return new NearbyDonorDTO(
                            user.getUserId(),
                            fullName,
                            donorBloodType,
                            readiness,
                            BigDecimal.valueOf(distance).setScale(2, RoundingMode.HALF_UP).doubleValue(),
                            address,
                            phone,
                            (lastDate != null ? lastDate : LocalDate.of(1970, 1, 1)),
                            (nextDate != null ? nextDate : LocalDate.of(1970, 1, 1)),
                            componentName,
                            isEligible,
                            recoveryStatus
                    );
                })
                .filter(Objects::nonNull)
                .sorted(Comparator.comparingDouble(NearbyDonorDTO::getDistanceKm))
                .collect(Collectors.toList());
    }




    public List<UrgentDonorListItemDTO> getInactiveUrgentDonors() {
        List<UrgentDonorRegistry> list = urgentDonorRegistryRepo.findUnavailableDonors();
        return list.stream()
                .map(urgentDonorListItemMapper::toDTO)
                .toList();
    }


    // B∆∞·ªõc 5: N·∫øu b·∫°n mu·ªën hi·ªÉn th·ªã chi ti·∫øt:
// => S·ª≠ d·ª•ng UrgentDonorDetailDTO, d√πng service:

    public UrgentDonorDetailDTO getDonorDetailById(Long userId) {
        var registry = urgentDonorRegistryRepository.findByDonor_UserIdAndIsVerifiedTrue(userId)
                .orElseThrow(() -> new RuntimeException("Donor not found"));

        var donor = registry.getDonor();
        var profile = donor.getUserProfile();
        var address = profile != null ? profile.getAddress() : null;

        // ‚úÖ ƒê·ªãnh d·∫°ng ng√†y dd/MM/yyyy
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");

        String formattedDob = (profile != null && profile.getDob() != null)
                ? profile.getDob().format(formatter)
                : "--";

        String formattedLastDonationDate = (profile != null && profile.getLastDonationDate() != null)
                ? profile.getLastDonationDate().format(formatter)
                : "--";

        // ‚úÖ M√¥ t·∫£ nh√≥m m√°u
        String bloodTypeDescription = (profile != null && profile.getBloodType() != null)
                ? profile.getBloodType().getDescription()
                : "--";

        // ‚úÖ M√¥ t·∫£ readiness
        DonorReadinessLevel readinessLevel = registry.getReadinessLevel(); // ‚úÖ ƒê√¢y l√† getter Lombok t·∫°o ra t·ª´ field `readinessLevel`

        String readinessDescription = "--";
        if (readinessLevel != null) {
            switch (readinessLevel) {
                case EMERGENCY_NOW -> readinessDescription = "HI·∫æN NGAY";
                case EMERGENCY_FLEXIBLE -> readinessDescription = "LINH HO·∫†T";
                case REGULAR -> readinessDescription = "TH√îNG TH∆Ø·ªúNG";
                case NOT_READY -> readinessDescription = "CH∆ØA S·∫¥N S√ÄNG";
                case UNDECIDED -> readinessDescription = "CH∆ØA CH·ªåN";
            }
        }

        return new UrgentDonorDetailDTO(
                profile != null ? profile.getFullName() : "--",
                formattedDob,
                profile != null ? profile.getGender() : "--",
                profile != null ? profile.getCitizenId() : "--",
                profile != null ? profile.getPhone() : "--",
                donor.getEmail(),
                address != null ? address.getFullAddress() : "--",
                bloodTypeDescription,
                readinessLevel,
                readinessDescription,
                formattedLastDonationDate,
                profile != null && profile.getRecoveryTime() != null
                        ? profile.getRecoveryTime() + " ng√†y" : "--",
                profile != null ? profile.getOccupation() : "--",
                Boolean.TRUE.equals(registry.getIsAvailable())
                        ? "‚úÖ ƒêang s·∫µn s√†ng (ƒê√£ x√°c minh)" : "‚ùå T·∫°m d·ª´ng"
        );
    }



    public List<UrgentDonorListItemDTO> getAllVerifiedUrgentDonorsFiltered(Long bloodTypeId, String location, LocalDate minDonationDate, Integer minRecoveryTime) {
        return urgentDonorRegistryRepository.findByIsVerifiedTrueAndIsAvailableTrue().stream()
                .filter(d -> d.getReadinessLevel() == DonorReadinessLevel.EMERGENCY_NOW || d.getReadinessLevel() == DonorReadinessLevel.EMERGENCY_FLEXIBLE)
                .filter(d -> bloodTypeId == null || (d.getBloodType() != null && d.getBloodType().getBloodTypeId().equals(bloodTypeId)))
                .filter(d -> location == null || (d.getDonor().getUserProfile().getLocation() != null &&
                        d.getDonor().getUserProfile().getLocation().toLowerCase().contains(location.toLowerCase())))
                .filter(d -> minDonationDate == null || (
                        d.getDonor().getUserProfile().getLastDonationDate() != null &&
                                !d.getDonor().getUserProfile().getLastDonationDate().toLocalDate().isBefore(minDonationDate)))
                .filter(d -> minRecoveryTime == null || (
                        d.getDonor().getUserProfile().getRecoveryTime() != null &&
                                d.getDonor().getUserProfile().getRecoveryTime() >= minRecoveryTime))
                .map(urgentDonorListItemMapper::toDTO)
                .toList();
    }


    // B∆∞·ªõc 3: Service th√™m h√†m l·∫•y danh s√°ch d·∫°ng b·∫£ng c√≥ l·ªçc

    public List<UrgentDonorListItemDTO> getFilteredUrgentDonors(Long bloodTypeId, String location, LocalDate minDonationDate) {
        return urgentDonorRegistryRepository.findByIsVerifiedTrueAndIsAvailableTrue().stream()
                .filter(d -> d.getReadinessLevel() == DonorReadinessLevel.EMERGENCY_NOW || d.getReadinessLevel() == DonorReadinessLevel.EMERGENCY_FLEXIBLE)
                .filter(d -> bloodTypeId == null || d.getBloodType().getBloodTypeId().equals(bloodTypeId))
                .filter(d -> location == null || (d.getDonor().getUserProfile().getLocation() != null && d.getDonor().getUserProfile().getLocation().toLowerCase().contains(location.toLowerCase())))
                .filter(d -> {
                    if (minDonationDate == null) return true;
                    var date = d.getDonor().getUserProfile().getLastDonationDate();
                    return date != null && !date.toLocalDate().isBefore(minDonationDate);
                })
                .map(urgentDonorListItemMapper::toDTO)
                .toList();
    }

    public List<User> getVerifiedUrgentDonorsReady() {
        return urgentDonorRegistryRepository.findVerifiedUrgentDonorsReady();
    }

    public List<UrgentDonorListItemDTO> getAllVerifiedUrgentDonorsForTable() {
        return urgentDonorRegistryRepository.findByIsVerifiedTrueAndIsAvailableTrue()
                .stream()
                .filter(d -> {
                    DonorReadinessLevel mode = d.getReadinessLevel();
                    return mode == DonorReadinessLevel.EMERGENCY_NOW || mode == DonorReadinessLevel.EMERGENCY_FLEXIBLE;
                })
                .map(urgentDonorListItemMapper::toDTO)
                .toList();
    }


    // ƒêƒÉng k√Ω ƒë∆°n gi·∫£n theo readiness level
    public void register(Long userId, DonorReadinessLevel level, UrgentDonorRegistrationDTO dto) {
        // ‚úÖ 1. L·∫•y ng∆∞·ªùi d√πng
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new ResourceNotFoundException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID: " + userId));

        // ‚úÖ 2. L·∫•y ho·∫∑c ki·ªÉm tra h·ªì s∆° c√° nh√¢n
        UserProfile profile = user.getUserProfile();
        if (profile == null) {
            throw new IllegalStateException("Ng∆∞·ªùi d√πng ch∆∞a c√≥ h·ªì s∆° c√° nh√¢n. Kh√¥ng th·ªÉ ƒëƒÉng k√Ω hi·∫øn m√°u kh·∫©n c·∫•p.");
        }

        // ‚úÖ 3. C·∫≠p nh·∫≠t t·ªça ƒë·ªô n·∫øu ch∆∞a c√≥
        if (dto.getLatitude() != null) profile.setLatitude(dto.getLatitude());
        if (dto.getLongitude() != null) profile.setLongitude(dto.getLongitude());

        // ‚úÖ 4. C·∫≠p nh·∫≠t nh√≥m m√°u n·∫øu ch∆∞a c√≥
        if (profile.getBloodType() == null && dto.getBloodTypeId() != null) {
            BloodType bloodType = bloodTypeRepository.findById(dto.getBloodTypeId())
                    .orElseThrow(() -> new ResourceNotFoundException("Kh√¥ng t√¨m th·∫•y nh√≥m m√°u v·ªõi ID: " + dto.getBloodTypeId()));
            profile.setBloodType(bloodType); // ‚úÖ S·ª¨A ·ªû ƒê√ÇY
        }

        userProfileRepository.save(profile); // ‚úÖ L∆∞u l·∫°i profile sau khi c·∫≠p nh·∫≠t

        // ‚úÖ 5. T·∫°o ho·∫∑c c·∫≠p nh·∫≠t registry
        UrgentDonorRegistry registry = urgentDonorRegistryRepo.findByDonor(user).orElse(null);
        if (registry == null) {
            registry = new UrgentDonorRegistry();
            registry.setDonor(user);
            registry.setRegisteredAt(LocalDateTime.now());
        }

        // ‚úÖ 6. G√°n d·ªØ li·ªáu ƒë·∫ßy ƒë·ªß cho registry
        registry.setBloodType(profile.getBloodType()); // ‚úÖ ch√≠nh x√°c ki·ªÉu entity
        registry.setReadinessLevel(level);
        registry.setLatitude(dto.getLatitude());
        registry.setLongitude(dto.getLongitude());
        registry.setIsAvailable(true);
        registry.setIsVerified(false);
        registry.setLeftGroupAt(null);

        // ‚úÖ 7. L∆∞u registry
        urgentDonorRegistryRepo.save(registry);
    }




    // ƒêƒÉng k√Ω ƒë·∫ßy ƒë·ªß (c√≥ v·ªã tr√≠ v√† ƒë·ªãa ch·ªâ)
    public void registerOrUpdateUrgentDonor(Long userId, UrgentDonorRegistrationDTO dto) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new ResourceNotFoundException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"));

        UrgentDonorRegistry registry = urgentDonorRegistryRepo.findByDonor(user).orElse(null);
        BloodType bloodType = bloodTypeRepository.findById(dto.getBloodTypeId())
                .orElseThrow(() -> new ResourceNotFoundException("Kh√¥ng t√¨m th·∫•y nh√≥m m√°u"));


        if (registry == null) {
            registry = new UrgentDonorRegistry();
            registry.setDonor(user);
            registry.setRegisteredAt(LocalDateTime.now());
        }

        registry.setBloodType(bloodType);
        registry.setReadinessLevel(DonorReadinessLevel.EMERGENCY_NOW); // Ho·∫∑c dto.getReadinessLevel() n·∫øu c√≥
        registry.setLatitude(dto.getLatitude());
        registry.setLongitude(dto.getLongitude());
        registry.setIsAvailable(true);
        registry.setIsVerified(false);
        registry.setLeftGroupAt(null);
        registry.setRegisteredAt(LocalDateTime.now());

        urgentDonorRegistryRepo.save(registry);
    }




    public List<UrgentDonorRegistry> getAllAvailableDonors() {
        return urgentDonorRegistryRepository.findAvailableDonorsAll();
    }

    public List<UrgentDonorRegistry> findNearbyDonors(double lat, double lng, double radiusKm) {
        return urgentDonorRegistryRepository.findNearbyVerifiedDonors(lat, lng, radiusKm);
    }

    public List<UrgentDonorResponseDTO> filterDonorsByBloodTypeAndDistance(Long bloodTypeId, double lat, double lng, double radiusKm) {
        return urgentDonorRegistryRepository.findNearbyVerifiedDonors(lat, lng, radiusKm)
                .stream()
                .filter(d -> d.getBloodType().getBloodTypeId().equals(bloodTypeId))
                .map(d -> {
                    UserProfile profile = d.getDonor().getUserProfile();
                    return new UrgentDonorResponseDTO(
                            d.getDonor().getUserId(),
                            profile.getFullName(),
                            d.getBloodType().getDescription(),
                            profile.getLocation(),
                            profile.getPhone(),
                            profile.getAddress()
                    );
                })
                .toList();
    }

    public List<UnverifiedDonorDTO> getUnverifiedDonors() {
        return urgentDonorRegistryRepository.findUnverifiedDonors()
                .stream()
                .map(urgentDonorMapper::toUnverifiedDTO)
                .toList();
    }

    public List<VerifiedUrgentDonorDTO> getVerifiedUrgentDonors() {
        return urgentDonorRegistryRepository.findByIsVerifiedTrueAndIsAvailableTrue()
                .stream()
                .map(urgentDonorMapper::toVerifiedDTO)
                .toList();
    }

    public void verifyDonor(Long id) {
        UrgentDonorRegistry donor = urgentDonorRegistryRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi hi·∫øn m√°u"));

        donor.setIsVerified(true);
        donor.setIsAvailable(true);
        urgentDonorRegistryRepository.save(donor);

        // G·ª≠i email x√°c minh th√†nh c√¥ng
        UserProfile profile = donor.getDonor().getUserProfile();
        String fullName = profile != null ? profile.getFullName() : "b·∫°n";
        String email = donor.getDonor().getEmail();
        String subject = "X√°c minh hi·∫øn m√°u kh·∫©n c·∫•p th√†nh c√¥ng";
        String body = """
                Xin ch√†o %s,

                H·ªì s∆° ƒëƒÉng k√Ω hi·∫øn m√°u kh·∫©n c·∫•p c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c minh th√†nh c√¥ng.
                C·∫£m ∆°n b·∫°n v√¨ tinh th·∫ßn s·∫µn s√†ng h·ªó tr·ª£ c·ªông ƒë·ªìng.

                Tr√¢n tr·ªçng,
                H·ªá th·ªëng h·ªó tr·ª£ hi·∫øn m√°u.
                """.formatted(fullName);
        emailService.sendSimpleMessage(email, subject, body);
    }

    public void rejectDonor(Long id) {
        UrgentDonorRegistry donor = urgentDonorRegistryRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi hi·∫øn m√°u"));

        if (Boolean.TRUE.equals(donor.getIsVerified())) {
            throw new IllegalStateException("Ng∆∞·ªùi hi·∫øn m√°u ƒë√£ ƒë∆∞·ª£c x√°c minh, kh√¥ng th·ªÉ t·ª´ ch·ªëi");
        }

        urgentDonorRegistryRepository.deleteById(id);
    }

    // B∆∞·ªõc 6: N·∫øu ng∆∞·ªùi d√πng mu·ªën r·ªùi kh·ªèi nh√≥m hi·∫øn m√°u kh·∫©n c·∫•p:
    public void leaveUrgentDonorGroup(Long userId) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new ResourceNotFoundException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"));

        UrgentDonorRegistry registry = urgentDonorRegistryRepo.findByDonor(user)
                .orElseThrow(() -> new ResourceNotFoundException("‚ùóB·∫°n kh√¥ng n·∫±m trong danh s√°ch hi·∫øn m√°u kh·∫©n c·∫•p."));

        if (!Boolean.TRUE.equals(registry.getIsAvailable())) {
            throw new IllegalStateException("‚ùóB·∫°n ƒë√£ r√∫t kh·ªèi danh s√°ch tr∆∞·ªõc ƒë√≥.");
        }

        registry.setIsAvailable(false);
        registry.setReadinessLevel(DonorReadinessLevel.UNDECIDED); // üëà Quan tr·ªçng: chuy·ªÉn v·ªÅ m·ª©c s·∫µn s√†ng th∆∞·ªùng
        registry.setLeftGroupAt(LocalDateTime.now());  // üëà C√≥ th·ªÉ th√™m c·ªôt n√†y trong entity
        urgentDonorRegistryRepo.save(registry);
    }




    public String getDonorStatus(Long userId) {
        return urgentDonorRegistryRepository.findByDonor_UserId(userId)
                .map(donor -> {
                    if (Boolean.TRUE.equals(donor.getIsVerified())) {
                        return "VERIFIED";
                    } else {
                        return "PENDING";
                    }
                })
                .orElse("NOT_REGISTERED");
    }

    public ReadinessConflictCheckDTO checkConflict(Long userId, DonorReadinessLevel newMode) {
        Optional<UrgentDonorRegistry> optional = urgentDonorRegistryRepo.findByDonor_UserId(userId);

        if (optional.isEmpty()) {
            return new ReadinessConflictCheckDTO(false, null); // ch∆∞a t·ª´ng ƒëƒÉng k√Ω ‚Üí kh√¥ng xung ƒë·ªôt
        }

        UrgentDonorRegistry registry = optional.get();

        boolean conflict = Boolean.TRUE.equals(registry.getIsAvailable())
                && registry.getReadinessLevel() != null
                && !registry.getReadinessLevel().equals(newMode);

        String current = registry.getReadinessLevel() != null ? registry.getReadinessLevel().name() : null;

        return new ReadinessConflictCheckDTO(conflict, current);
    }


    public String forceChangeReadinessLevel(Long userId, DonorReadinessLevel newMode) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new ResourceNotFoundException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"));

        UrgentDonorRegistry registry = urgentDonorRegistryRepo.findByDonor(user)
                .orElseThrow(() -> new ResourceNotFoundException("Kh√¥ng c√≥ ƒë∆°n ƒëƒÉng k√Ω hi·∫øn m√°u kh·∫©n c·∫•p"));

        DonorReadinessLevel oldMode = registry.getReadinessLevel();

        // ‚úÖ N·∫øu gi·ªëng nhau th√¨ kh√¥ng c·∫ßn update, tr·∫£ v·ªÅ th√¥ng b√°o
        if (oldMode == newMode) {
            return "‚ö†Ô∏è B·∫°n ƒëang ·ªü c√πng ch·∫ø ƒë·ªô: " + newMode.name() + " (kh√¥ng c√≥ thay ƒë·ªïi)";
        }

        // ‚úÖ N·∫øu kh√°c nhau th√¨ update
        registry.setReadinessLevel(newMode);
        registry.setIsAvailable(true);
        registry.setIsVerified(false);
        registry.setRegisteredAt(LocalDateTime.now());
        registry.setLeftGroupAt(null);
        urgentDonorRegistryRepo.save(registry);

        // ‚úÖ Ghi log thay ƒë·ªïi
        ReadinessChangeLog log = new ReadinessChangeLog();
        log.setDonor(user);
        log.setFromLevel(oldMode);
        log.setToLevel(newMode);
        log.setChangedAt(LocalDateTime.now());
        readinessChangeLogRepository.save(log);

        return "‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i readiness th√†nh c√¥ng";
    }

    public List<ReadinessChangeLogDTO> getReadinessChangeLogsByUserIdAndDate(
            Long userId, LocalDate from, LocalDate to) {

        User user = userRepository.findById(userId)
                .orElseThrow(() -> new ResourceNotFoundException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"));

        LocalDateTime fromDate = from != null ? from.atStartOfDay() : null;
        LocalDateTime toDate = to != null ? to.atTime(23, 59, 59) : null;

        return readinessChangeLogRepository.findByUserAndDateRange(user, fromDate, toDate).stream()
                .map(log -> new ReadinessChangeLogDTO(
                        log.getFromLevel(),        // ‚úÖ field ƒë√∫ng
                        log.getToLevel(),          // ‚úÖ field ƒë√∫ng
                        log.getChangedAt()
                ))
                .toList();

    }
    public CurrentUrgentDonorStatusDTO getCurrentUrgentStatus(Long userId) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new ResourceNotFoundException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"));

        UrgentDonorRegistry registry = urgentDonorRegistryRepo.findByDonor(user)
                .orElseThrow(() -> new ResourceNotFoundException("Kh√¥ng c√≥ ƒë∆°n ƒëƒÉng k√Ω hi·∫øn m√°u kh·∫©n c·∫•p"));

        return new CurrentUrgentDonorStatusDTO(
                registry.getReadinessLevel(),
                registry.getRegisteredAt(),
                registry.getIsVerified(),
                registry.getLeftGroupAt()
        );
    }

}
