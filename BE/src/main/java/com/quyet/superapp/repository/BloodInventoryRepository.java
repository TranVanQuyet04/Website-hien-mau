package com.quyet.superapp.repository;

import com.quyet.superapp.dto.BloodGroupDistributionDTO;
import com.quyet.superapp.entity.BloodComponent;
import com.quyet.superapp.entity.BloodInventory;
import com.quyet.superapp.entity.BloodType;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.util.List;
import java.util.Optional;

public interface BloodInventoryRepository extends JpaRepository<BloodInventory, Long> {

        long countByTotalQuantityMlGreaterThan(int value);

        @Query("SELECT new com.quyet.superapp.dto.BloodGroupDistributionDTO(b.bloodType.description, SUM(b.totalQuantityMl)) " +
                "FROM BloodInventory b WHERE b.totalQuantityMl > 0 GROUP BY b.bloodType.description")
        List<BloodGroupDistributionDTO> calculateBloodGroupDistribution();


        /**
         * ‚úÖ T√¨m inventory usable theo nh√≥m m√°u + th√†nh ph·∫ßn
         * - S·ªë l∆∞·ª£ng > 0
         * - Tr·∫°ng th√°i STORED
         * - Ch∆∞a h·∫øt h·∫°n (expiredAt > now ho·∫∑c null)
         */
        @Query("SELECT b FROM BloodInventory b WHERE " +
                "b.bloodType.bloodTypeId = :bloodTypeId AND " +
                "b.component.bloodComponentId = :componentId AND " +
                "b.totalQuantityMl > 0 AND " +
                "b.status = 'STORED' AND " +
                "(b.expiredAt IS NULL OR b.expiredAt > CURRENT_TIMESTAMP)")
        List<BloodInventory> findByBloodTypeAndComponentAndUsable(
                @Param("bloodTypeId") Long bloodTypeId,
                @Param("componentId") Long componentId
        );

        /**
         * ‚úÖ T√¨m inventory usable theo nh√≥m m√°u t∆∞∆°ng th√≠ch v√† th√†nh ph·∫ßn
         * D√πng trong logic t∆∞∆°ng th√≠ch khi nh√≥m m√°u c·∫ßn ‚Üí c√°c lo·∫°i c√≥ th·ªÉ thay th·∫ø
         */
        @Query("SELECT b FROM BloodInventory b WHERE " +
                "b.bloodType IN :types AND " +
                "b.component.bloodComponentId = :componentId AND " +
                "b.totalQuantityMl > 0 AND " +
                "b.status = 'STORED' AND " +
                "(b.expiredAt IS NULL OR b.expiredAt > CURRENT_TIMESTAMP)")
        List<BloodInventory> findByBloodTypeInAndComponentAndUsable(
                @Param("types") List<BloodType> types,
                @Param("componentId") Long componentId
        );

        /**
         * ‚úÖ T√¨m theo BloodType & Component ch√≠nh x√°c
         * (Kh√¥ng ki·ªÉm tra usable)
         */
        Optional<BloodInventory> findByBloodTypeAndComponent(BloodType bloodType, BloodComponent component);

        /**
         * ‚úÖ Truy v·∫•n th·ªß c√¥ng b·∫±ng ID ƒë·ªÉ tr√°nh l·ªói entity proxy
         */
        @Query("SELECT bi FROM BloodInventory bi WHERE " +
                "bi.bloodType.bloodTypeId = :bloodTypeId AND " +
                "bi.component.bloodComponentId = :componentId")
        List<BloodInventory> findByTypeAndComponent(
                @Param("bloodTypeId") Long bloodTypeId,
                @Param("componentId") Long componentId
        );

        /**
         * üìä Th·ªëng k√™ l∆∞·ª£ng m√°u theo nh√≥m m√°u
         */
        @Query("SELECT bi.bloodType.description, SUM(bi.totalQuantityMl) " +
                "FROM BloodInventory bi GROUP BY bi.bloodType.description")
        List<Object[]> findGroupCounts();

        /**
         * üìä T·ªïng l∆∞·ª£ng m√°u hi·ªán c√≥ (mL)
         */
        @Query("SELECT COALESCE(SUM(bi.totalQuantityMl), 0) FROM BloodInventory bi")
        long sumAllUnits();
}
