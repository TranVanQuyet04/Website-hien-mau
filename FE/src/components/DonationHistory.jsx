import React, { useEffect, useState } from "react";
import {
  Table,
  Modal,
  Typography,
  Tag,
  Descriptions,
  message,
  Layout,
  Row,
  Col,
  Space,
} from "antd";
import { HistoryOutlined,CalendarOutlined,UserOutlined } from "@ant-design/icons";
import axios from "axios";
import dayjs from "dayjs";
import * as XLSX from "xlsx";

const { Title,Text } = Typography;
const { Header, Content } = Layout;


const DonationHistory = () => {
  const [history, setHistory] = useState([]);
  const [selected, setSelected] = useState(null);
  const [modalVisible, setModalVisible] = useState(false);
const donatedHistory = history.filter((item) => item.status === "DONATED");
  useEffect(() => {
  const token = localStorage.getItem("token"); // ho·∫∑c n∆°i b·∫°n l∆∞u token
  axios
    .get(`http://localhost:8080/api/donation`, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    })
    .then((res) => {
      console.log("‚úÖ Data t·ª´ API:", res.data);
      setHistory(Array.isArray(res.data) ? res.data : []);
    })
    .catch((err) => {
      console.error("‚ùå L·ªói API:", err);
      message.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch hi·∫øn m√°u.");
    });
}, []);



  const handleExportExcel = () => {
    const exportData = history.map((h) => ({
      "Ng√†y hi·∫øn": dayjs(h.donation_date).format("DD/MM/YYYY"),
      "ƒê·ªãa ƒëi·ªÉm": h.location,
      "Th·ªÉ t√≠ch": `${h.volume_ml} ml`,
      "Nh√≥m m√°u": h.blood_type,
      "Tr·∫°ng th√°i": h.status,
    }));

    const worksheet = XLSX.utils.json_to_sheet(exportData);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "LichSuHienMau");

    XLSX.writeFile(workbook, "lich_su_hien_mau.xlsx");
  };

  const columns = [
    {
      title: "üóì Ng√†y",
      dataIndex: "donation_date",
      render: (date) => dayjs(date).format("DD/MM/YYYY"),
    },
    {
      title: "üè• ƒê·ªãa ƒëi·ªÉm",
      dataIndex: "location",
    },
    // {
    //   title: "ü©∏ Th·ªÉ t√≠ch",
    //   dataIndex: "volume_ml",
    //   render: (v) => `${v}ml`,
    // },
    // {
    //   title: "üß¨ Nh√≥m m√°u",
    //   dataIndex: "blood_type",
    // },
    {
      title: "üì¶ Tr·∫°ng th√°i",
      dataIndex: "status",
      render: (status) => (
        <Tag color={status === "DONATED" || status === "CONFIRMED" ? "green" : "orange"}>
          {status === "DONATED" ? "ƒê√£ hi·∫øn" : status}
        </Tag>
      ),
    },
  ];

  return (
    <Layout style={{ minHeight: '100vh' }}>
      <Header style={{ background: '#fff', padding: '0 24px', borderBottom: '1px solid #f0f0f0' }}>
        <Row justify="space-between" align="middle">
          <Col>
            <Title level={3} style={{ margin: 0, color: '#1890ff' }}>
              <HistoryOutlined style={{ marginRight: 8 }} />
              L·ªãch s·ª≠ Hi·∫øn m√°u
            </Title>
          </Col>
          <Col>
            <Space>
              <Text type="secondary">
                <CalendarOutlined style={{ marginRight: 4 }} />
                {new Date().toLocaleDateString('vi-VN')}
              </Text>
              <Text type="secondary">
                <UserOutlined style={{ marginRight: 4 }} />
                Qu·∫£n tr·ªã vi√™n
              </Text>
            </Space>
          </Col>
        </Row>
      </Header>

      <Content style={{ padding: '24px' }}>
      <Table
        columns={columns}
        dataSource={history.filter((item) => item.status === "DONATED")}
        rowKey={(record) => record.id}
        onRow={(record) => ({
          onClick: () => {
            setSelected(record);
            setModalVisible(true);
          },
        })}
        pagination={{ pageSize: 5 }}
        locale={{ emptyText: "Kh√¥ng c√≥ l·ªãch s·ª≠ hi·∫øn m√°u." }}
      />

      <Modal
        title="üìã Chi ti·∫øt l·∫ßn hi·∫øn m√°u"
        open={modalVisible}
        onCancel={() => setModalVisible(false)}
        footer={null}
      >
        {selected && (
          <Descriptions column={1} bordered size="small">
            <Descriptions.Item label="üë§ Ng∆∞·ªùi hi·∫øn">
  {selected.fullName || "‚Äî"}
</Descriptions.Item>
            <Descriptions.Item label="üóì Ng√†y hi·∫øn">
              {dayjs(selected.donation_date).format("DD/MM/YYYY")}
            </Descriptions.Item>
            <Descriptions.Item label="üè• ƒê·ªãa ƒëi·ªÉm">{selected.location}</Descriptions.Item>
            {/* <Descriptions.Item label="üß¨ Nh√≥m m√°u">{selected.blood_type}</Descriptions.Item>
            <Descriptions.Item label="ü©∏ Th·ªÉ t√≠ch">{selected.volume_ml} ml</Descriptions.Item> */}
            <Descriptions.Item label="üìù Ghi ch√∫">{selected.note || "Kh√¥ng c√≥"}</Descriptions.Item>
            {/* <Descriptions.Item label="üß™ ƒê∆°n v·ªã m√°u sinh ra">
              {(selected.blood_units && selected.blood_units.length > 0)
                ? selected.blood_units.join(", ")
                : "Ch∆∞a c√≥"}
            </Descriptions.Item> */}
          </Descriptions>
        )}
      </Modal>
      </Content>
</Layout>
  );
};

export default DonationHistory;
