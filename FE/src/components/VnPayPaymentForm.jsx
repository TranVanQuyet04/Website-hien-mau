import React, { useState, useEffect } from 'react';
import {
  Table,
  Tag,
  Button,
  Modal,
  Descriptions,
  Card,
  Input,
  Select,
  DatePicker,
  Space,
  Typography,
  Divider,
  Badge,
  Tooltip,
  Row,
  Col,
  Layout,
  message 
} from 'antd';
import {
  EyeOutlined,
  SearchOutlined,
  FilterOutlined,
  UserOutlined,
  CalendarOutlined,
  HeartOutlined,
  AlertOutlined,
  CheckCircleOutlined,
  ExclamationCircleOutlined,
  ClockCircleOutlined,
  StarOutlined,
  WarningOutlined
} from '@ant-design/icons';
import { CreditCardOutlined } from '@ant-design/icons';
import dayjs from 'dayjs';
import axios from 'axios';
import VnPayPaymentFormContent from "./VnPayPayment";
import BloodUnitSelector from './BloodUnitSelector';


const { Header, Content } = Layout;
const { Title, Text } = Typography;
const { Option } = Select;
const { RangePicker } = DatePicker;

const VnPayPaymentForm = () => {
const [selectedRecord, setSelectedRecord] = useState(null);
const [modalVisible, setModalVisible] = useState(false);
const [searchText, setSearchText] = useState('');
const [statusFilter, setStatusFilter] = useState('all');
const [dateRange, setDateRange] = useState(null);
const [timePeriod, setTimePeriod] = useState('custom');
const [showPaymentModal, setShowPaymentModal] = useState(false);
const [selectedRequest, setSelectedRequest] = useState(null);
const [selectedUnits, setSelectedUnits] = useState([]);
const [isModalOpen, setIsModalOpen] = useState(false);
const [currentRecord, setCurrentRecord] = useState(null);
const [selectedBloodUnits, setSelectedBloodUnits] = useState([]);
const [showSelector, setShowSelector] = useState(false);
const handleConfirmUnits = () => {
  const simplifiedUnits = selectedUnits.map(unit => ({
    bloodUnitId: unit.bloodUnitId,
    quantityMl: unit.quantityMl,
    componentId: unit.componentId,
  }));

  setSelectedUnits(simplifiedUnits); // bi·∫øn global state ho·∫∑c props callback
  setShowPaymentModal(true); // m·ªü modal thanh to√°n
};

const handleUnitSelected = (units) => {
  console.log("ƒê∆°n v·ªã m√°u ƒë∆∞·ª£c ch·ªçn:", units);

  const simplified = units.map(unit => ({
    bloodUnitId: unit.bloodUnitId || unit.id,  // c·∫ßn `bloodUnitId` ƒë√∫ng t√™n
    bloodTypeName: unit.bloodTypeName,
    componentName: unit.componentName,
    quantityMl: unit.quantityMl || unit.volume || unit.quantity, // tu·ª≥ theo t√™n
    unitCode: unit.unitCode,
  }));

  setSelectedUnits(simplified); // ‚úÖ ƒë√¢y l√† state g·ª≠i sang VnPayPayment
  setIsModalOpen(false);
};

const handleSelectUnits = (units) => {
  console.log("ü©∏ ƒê∆°n v·ªã m√°u ƒë√£ ch·ªçn:", units);
  setSelectedUnits(units);
};
  // C·∫•u h√¨nh hi·ªÉn th·ªã tr·∫°ng th√°i
  const statusConfig = {
    PENDING: { color: 'warning', text: 'CH·ªú DUY·ªÜT', icon: <ExclamationCircleOutlined /> },
    APPROVED: { color: 'success', text: 'ƒê√É DUY·ªÜT', icon: <CheckCircleOutlined /> },
    REJECTED: { color: 'error', text: 'T·ª™ CH·ªêI', icon: <ExclamationCircleOutlined /> },
    WAITING: { color: 'processing', text: 'CH·ªú M√ÅU', icon: <ClockCircleOutlined /> }
  };

  const [bloodRequests, setBloodRequests] = useState([]);
  const [loading, setLoading] = useState(false);
useEffect(() => {
  fetchBloodRequests();
}, []);

const fetchBloodRequests = async () => {
  try {
    setLoading(true);
    const token = localStorage.getItem("token");
    const res = await axios.get("http://localhost:8080/api/blood-requests/approved", {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
const formatDateTime = (dateString) => {
  if (!dateString) return '';
  return dayjs(dateString).format('HH:mm DD/MM/YYYY');
};
const formatDate = (dateStr) => {
  if (!dateStr) return "--";
  return dayjs(dateStr).format("DD/MM/YYYY HH:mm");
};

const mapTriageToColor = {
  RED: { color: 'red', label: 'KH·∫®N C·∫§P' },
  YELLOW: { color: 'orange', label: 'G·∫§P' },
  GREEN: { color: 'green', label: 'B√åNH TH∆Ø·ªúNG' },
};

const openUnitSelector = (record) => {
  setCurrentRecord(record);
  setIsModalOpen(true);
};
const closeUnitSelector = () => {
  setIsModalOpen(false);
  setCurrentRecord(null);
};
const mapStatusToTag = {
  PENDING: { color: 'warning', label: 'CH·ªú DUY·ªÜT' },
  APPROVED: { color: 'success', label: 'ƒê√É DUY·ªÜT' },
  REJECTED: { color: 'error', label: 'T·ª™ CH·ªêI' },
  COMPLETED: { color: 'cyan', label: 'ƒê√É HO√ÄN TH√ÄNH' },
};
const bloodTypeReverseMap = {
  'A+': 1,
  'A-': 2,
  'B+': 3,
  'B-': 4,
  'AB+': 5,
  'AB-': 6,
  'O+': 7,
  'O-': 8,
};

const bloodComponentReverseMap = {
  'H·ªìng c·∫ßu': 3,
  'Huy·∫øt t∆∞∆°ng': 2,
  'Ti·ªÉu c·∫ßu': 1,
};

const handleOpenModal = (record) => {
  const bloodTypeId = record.bloodTypeId ?? bloodTypeReverseMap[record.bloodTypeName];
  const componentId = record.componentId ?? bloodComponentReverseMap[record.componentName];

  console.log("‚úÖ Converted to ID:", { bloodTypeId, componentId });

  setCurrentRecord({
    requestId: record.requestId,
    bloodTypeId,
    componentId
  });

  setIsModalOpen(true);
};





const bloodTypeMap = {
  1: 'A+',
  2: 'A-',
  3: 'B+',
  4: 'B-',
  5: 'AB+',
  6: 'AB-',
  7: 'O+',
  8: 'O-',
};
const bloodComponentMap = {
  3: 'H·ªìng c·∫ßu',
  2: 'Huy·∫øt t∆∞∆°ng',
  1: 'Ti·ªÉu c·∫ßu',
};


    // Chu·∫©n ho√° d·ªØ li·ªáu
const mapped = res.data.map((item) => ({
  id: item.bloodRequestId,
  patientName: item.patientName || '‚Äî',
  bloodTypeName: item.bloodTypeName || 'Kh√¥ng r√µ', // ‚úÖ Th√™m d√≤ng n√†y
        componentName: item.componentName || 'Kh√¥ng r√µ', // ‚úÖ Th√™m d√≤ng n√†y
  age: item.patientAge || '‚Äî',
  volume: `${item.quantityMl}ml`,
  priority: mapTriageToColor[item.triageLevel]?.label || 'Kh√¥ng r√µ',
  status: item.status,
  createdDate: formatDate(item.createdAt),
  requester: {
    name: `#${item.requesterId}`,
    phone: item.requesterPhone || '‚Äî',
  },
  reason: item.reason || '‚Äî',
  bagCount: item.quantityBag || 1,
  bloodComponent: bloodComponentMap[item.componentId] || `#${item.componentId}`,
  notes: {
    warning: item.warningNote || '',
    special: item.specialNote || '',
    emergency: item.emergencyNote || '',
  },
  processingTime: {
    requestTime: formatDateTime(item.createdAt),
    createdTime: formatDateTime(item.createdAt),
    approvedTime: item.approvedAt ? formatDateTime(item.approvedAt) : '',
    processingDuration: '‚Äî',
  },
  patientInfo: {
    weight: item.patientWeight || 0,
    phone: item.patientPhone || '',
    donnorId: item.patientRecordCode || '',
  },
}));


    setBloodRequests(mapped);
  } catch (err) {
    console.error("‚ùå L·ªói khi t·∫£i danh s√°ch y√™u c·∫ßu m√°u:", err);
  } finally {
    setLoading(false);
  }
};

const approveBloodRequest = async (data) => {
  try {
    const token = localStorage.getItem("token");
    const res = await axios.put(
      "http://localhost:8080/api/blood-requests/approve",
      data,
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    );
    message.success("‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i y√™u c·∫ßu.");
    return res.data;
  } catch (err) {
    console.error("‚ùå L·ªói khi duy·ªát y√™u c·∫ßu:", err);
    message.error("L·ªói khi duy·ªát y√™u c·∫ßu.");
    return null;
  }
};

const handleApprove = async () => {
  const payload = {
  bloodRequestId: recordId,
  status: newStatus,
  approvedBy: currentUser.userId,
  confirmedVolumeMl: 400, // ph·∫£i c√≥, kh√¥ng ƒë∆∞·ª£c null
};


  const updated = await approveBloodRequest(payload);
  if (updated) {
    setModalVisible(false);
    fetchBloodRequests(); // load l·∫°i danh s√°ch
  }
};


  // H√†m x·ª≠ l√Ω ch·ªçn kho·∫£ng th·ªùi gian nhanh
  const handleTimePeriodChange = (value) => {
    setTimePeriod(value);

    const now = dayjs();
    let startDate, endDate;

    switch (value) {
      case '1week':
        startDate = now.subtract(1, 'week');
        endDate = now;
        setDateRange([startDate, endDate]);
        break;
      case '1month':
        startDate = now.subtract(1, 'month');
        endDate = now;
        setDateRange([startDate, endDate]);
        break;
      case '1year':
        startDate = now.subtract(1, 'year');
        endDate = now;
        setDateRange([startDate, endDate]);
        break;
      case 'custom':
        setDateRange(null);
        break;
      default:
        setDateRange(null);
    }
  };

  // H√†m x·ª≠ l√Ω thay ƒë·ªïi date range picker
  const handleDateRangeChange = (dates) => {
    setDateRange(dates);
    if (dates) {
      setTimePeriod('custom');
    }
  };

  // H√†m reset filters
  const handleReset = () => {
    setSearchText('');
    setStatusFilter('all');
    setDateRange(null);
    setTimePeriod('custom');
  };

  // H√†m x·ª≠ l√Ω t√¨m ki·∫øm
  const handleSearch = () => {
    console.log({
      searchText,
      statusFilter,
      dateRange,
      timePeriod
    });
    // Th·ª±c hi·ªán logic t√¨m ki·∫øm ·ªü ƒë√¢y
  };

  // H√†m x·ª≠ l√Ω thay ƒë·ªïi tr·∫°ng th√°i
const handleStatusChange = async (recordId, newStatus) => {
  const currentUser = JSON.parse(localStorage.getItem("user") || "{}");
  if (!recordId || !currentUser.userId) {
    message.error("Thi·∫øu th√¥ng tin y√™u c·∫ßu ho·∫∑c ng∆∞·ªùi duy·ªát.");
    return;
  }

  // ‚úÖ T√¨m b·∫£n ghi ƒëang x·ª≠ l√Ω ƒë·ªÉ l·∫•y confirmedVolumeMl
  const record = bloodRequests.find(r => r.id === recordId);
  if (!record) {
    message.error("Kh√¥ng t√¨m th·∫•y b·∫£n ghi y√™u c·∫ßu m√°u.");
    return;
  }

  const payload = {
    bloodRequestId: recordId,
    status: newStatus,
    approvedBy: currentUser.userId,
    confirmedVolumeMl: record.quantityMl || parseInt(record.volume), // ∆Øu ti√™n d√πng quantityMl n·∫øu c√≥
  };

  try {
    const updated = await approveBloodRequest(payload);
    if (!updated) return;

    const now = dayjs();

    // ‚úÖ C·∫≠p nh·∫≠t danh s√°ch
    setBloodRequests(prevData =>
      prevData.map(r =>
        r.id === recordId
          ? {
              ...r,
              status: updated.status || newStatus,
              processingTime: {
                ...r.processingTime,
                approvedTime: updated.approvedAt
                  ? dayjs(updated.approvedAt).format("DD/MM/YYYY HH:mm")
                  : now.format("DD/MM/YYYY HH:mm"),
                processingDuration:
                  newStatus !== "PENDING"
                    ? now.diff(dayjs(r.processingTime.createdTime, "DD/MM/YYYY HH:mm"), "minute") + "m"
                    : "‚Äî",
              },
            }
          : r
      )
    );

    // ‚úÖ C·∫≠p nh·∫≠t modal n·∫øu ƒëang m·ªü
    if (selectedRecord?.id === recordId) {
      setSelectedRecord(prev => ({
        ...prev,
        status: updated.status || newStatus,
        processingTime: {
          ...prev.processingTime,
          approvedTime: updated.approvedAt
            ? dayjs(updated.approvedAt).format("DD/MM/YYYY HH:mm")
            : now.format("DD/MM/YYYY HH:mm"),
          processingDuration:
            newStatus !== "PENDING"
              ? now.diff(dayjs(prev.processingTime.createdTime, "DD/MM/YYYY HH:mm"), "minute") + "m"
              : "‚Äî",
        },
      }));
    }

    message.success("‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng.");
  } catch (error) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:", error);
    message.error("ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i.");
  }
};



  const columns = [
         {
    title: 'STT',
    width: 60,
    align: 'center',
    render: (_, __, index) => index + 1,
  },
    {
  title: 'ID',
  dataIndex: 'id',
  key: 'id',
  width: 60,
  align: 'center',
  sorter: (a, b) => a.id - b.id,
  defaultSortOrder: 'descend',
},
    {
      title: 'B·ªánh nh√¢n',
      dataIndex: 'patientName',
      key: 'patientName',
      width: 200,
      filteredValue: searchText ? [searchText] : null,
      onFilter: (value, record) =>
        record.patientName.toLowerCase().includes(value.toLowerCase()),
      render: (text) => (
        <div className="flex items-center">
          <UserOutlined className="mr-2 text-blue-500" />
          <Text strong>{text}</Text>
        </div>
      ),
    },
    {
          title: 'Nh√≥m m√°u',
          dataIndex: 'bloodTypeName',
          key: 'bloodTypeName',
          align: 'center',
          render: (text) => (
            <Tag color="red" className="font-semibold">
              {text || 'Kh√¥ng r√µ'}
            </Tag>
          ),
        },
    {
      title: 'Th√†nh ph·∫ßn m√°u',
      dataIndex: 'componentName',
      key: 'componentName',
      align: 'center',
      render: (text) => (
        <Tag color="blue" className="font-semibold">
          {text || 'Kh√¥ng r√µ'}
        </Tag>
      ),
    },
    {
  title: 'ƒê∆°n v·ªã m√°u s·∫µn c√≥',
  dataIndex: 'bloodUnitId',
  key: 'bloodUnitId',
  width: 250,
  render: (_, record) => (
  <div>
    {record.selectedUnits && record.selectedUnits.length > 0 ? (
      <>
        <strong>{record.selectedUnits.map(u => u.unitCode).join(', ')}</strong><br />
        <small>{record.bloodTypeName} - {record.componentName}</small><br />
        <span>
          {record.selectedUnits.reduce((sum, u) => sum + (u.quantityMl || 0), 0)} ml
        </span>
      </>
    ) : (
      <span style={{ color: 'gray' }}>Ch∆∞a ch·ªçn</span>
    )}
    <br />
    <button
      style={{
        marginTop: 6,
        padding: '4px 8px',
        backgroundColor: '#1677ff',
        color: 'white',
        border: 'none',
        borderRadius: 4,
        cursor: 'pointer'
      }}
      onClick={() => {
        // ‚úÖ G·ªçi setCurrentRecord tr∆∞·ªõc
        const bloodTypeReverseMap = {
  'A+': 1,
  'A-': 2,
  'B+': 3,
  'B-': 4,
  'AB+': 5,
  'AB-': 6,
  'O+': 7,
  'O-': 8,
};

const bloodComponentReverseMap = {
  'H·ªìng c·∫ßu': 3,
  'Huy·∫øt t∆∞∆°ng': 2,
  'Ti·ªÉu c·∫ßu': 1,
};
        const selected = {
  componentId: record.componentId ?? bloodComponentReverseMap[record.componentName],
  bloodTypeId: record.bloodTypeId ?? bloodTypeReverseMap[record.bloodTypeName],
  bloodTypeName: record.bloodTypeName,
  componentName: record.componentName,
   requestId: record.id ?? record.requestId ?? record.request?.id,
};
        console.log("üí° Ch·ªçn ƒë∆°n v·ªã m√°u cho:", selected);
        setCurrentRecord(selected);
        setIsModalOpen(true); // ‚úÖ G·ªçi sau
      }}
    >
      Ch·ªçn ƒë∆°n v·ªã m√°u
    </button>
  </div>
)

}

,
    {
      title: 'L∆∞·ª£ng',
      dataIndex: 'volume',
      key: 'volume',
      width: 100,
      align: 'center',
      render: (text) => <Text strong className="text-red-600">{text}</Text>,
    },
    {
      title: '∆Øu ti√™n',
      dataIndex: 'priority',
      key: 'priority',
      width: 100,
      align: 'center',
      render: (priority) => {
        const config = {
          RED: { color: 'red', icon: <AlertOutlined />, text: 'KH·∫®N C·∫§P' },
          YELLOW: { color: 'orange', icon: <WarningOutlined />, text: 'G·∫§P' },
          GREEN: { color: 'green', icon: <CheckCircleOutlined />, text: 'B√åNH TH∆Ø·ªúNG' }
        };
        const { color, icon, text } = config[priority] || config.GREEN;
        return (
          <Badge status="processing" color={color}>
            <Tag color={color} icon={icon} className="font-semibold">
              {text}
            </Tag>
          </Badge>
        );
      },
    },
    {
      title: 'Tr·∫°ng th√°i',
      dataIndex: 'status',
      key: 'status',
      width: 160,
      filteredValue: statusFilter === 'all' ? null : [statusFilter],
      onFilter: (value, record) => record.status === value,
      render: (status, record) => {
        const { color, text, icon } = statusConfig[status] || statusConfig.PENDING;

        // N·∫øu tr·∫°ng th√°i l√† PENDING, hi·ªÉn th·ªã dropdown ƒë·ªÉ admin ch·ªçn
        if (status === 'PENDING') {
          return (
            <Select
              size="middle"
              value={statusConfig[status].text}
              onChange={(newStatus) => handleStatusChange(record.id, newStatus)}
              className="w-full"
              placeholder="Ch·ªçn tr·∫°ng th√°i"
            >
              <Option value="PENDING" disabled>
                <Tag color="warning" icon={<ClockCircleOutlined />} className="font-semibold m-0">
                  CH·ªú DUY·ªÜT
                </Tag>
              </Option>
              <Option value="APPROVED">
                <Tag color="success" icon={<CheckCircleOutlined />} className="font-semibold m-0">
                  ƒê√É DUY·ªÜT
                </Tag>
              </Option>
              <Option value="REJECTED">
                <Tag color="error" icon={<ExclamationCircleOutlined />} className="font-semibold m-0">
                  T·ª™ CH·ªêI
                </Tag>
              </Option>
              <Option value="WAITING">
                <Tag color="processing" icon={<ClockCircleOutlined />} className="font-semibold m-0">
                  CH·ªú M√ÅU
                </Tag>
              </Option>
            </Select>
          );
        }

        // N·∫øu tr·∫°ng th√°i l√† WAITING, ch·ªâ cho ch·ªçn APPROVED ho·∫∑c REJECTED
        if (status === 'WAITING') {
          return (
            <Select
              size="middle"
              value={statusConfig[status].text}
              onChange={newStatus => handleStatusChange(record.id, newStatus)}
              className="w-full"
              placeholder="Ch·ªçn h√†nh ƒë·ªông"
            >
              <Option value="APPROVED">
                <Tag color="success" icon={<CheckCircleOutlined />} className="font-semibold m-0">
                  ƒê√É DUY·ªÜT
                </Tag>
              </Option>
              <Option value="REJECTED">
                <Tag color="error" icon={<ExclamationCircleOutlined />} className="font-semibold m-0">
                  T·ª™ CH·ªêI
                </Tag>
              </Option>
            </Select>
          );
        }

        // N·∫øu ƒë√£ c√≥ tr·∫°ng th√°i kh√°c PENDING, ch·ªâ hi·ªÉn th·ªã tag
        return (
          <Tag color={color} icon={icon} className="font-semibold">
            {text}
          </Tag>
        );
      },
    },
    {
      title: 'Ng√†y t·∫°o',
      dataIndex: 'createdDate',
      key: 'createdDate',
      width: 120,
      render: (text) => (
        <div className="flex items-center">
          <CalendarOutlined className="mr-1 text-gray-500" />
          {text}
        </div>
      ),
    },
    {
  title: 'Thanh to√°n',
  key: 'action',
  width: 100,
  align: 'center',
  render: (_, record) => (
    <Tooltip title="Thanh to√°n y√™u c·∫ßu">
      <Button
        type="primary"
        icon={<CreditCardOutlined />}
        size="small"
        onClick={() => {
          setSelectedRequest(record);
          setShowPaymentModal(true);
        }}
        className="bg-green-500 hover:bg-green-600"
      />
    </Tooltip>
  ),
}
,
  ];

  const handleViewDetail = (record) => {
    setSelectedRecord(record);
    setModalVisible(true);
  };

  const handleCloseModal = () => {
    setModalVisible(false);
    setSelectedRecord(null);
  };

  // H√†m render footer c·ªßa modal
 const renderModalFooter = () => {
  if (!selectedRecord) return null;

  const footerButtons = [];

  // H√†m t·∫°o n√∫t h√†nh ƒë·ªông nhanh g·ªçn
  const createActionButton = (key, text, icon, status, type = 'default', danger = false, className = '') => (
    <Button
      key={key}
      type={type}
      danger={danger}
      icon={icon}
      onClick={() => handleStatusChange(selectedRecord.id, status)}
      className={className}
    >
      {text}
    </Button>
  );

  // Tu·ª≥ theo tr·∫°ng th√°i hi·ªán t·∫°i
  switch (selectedRecord.status) {
    case 'PENDING':
      footerButtons.push(
        createActionButton('approve', 'Duy·ªát', <CheckCircleOutlined />, 'APPROVED', 'primary', false, 'bg-green-500 hover:bg-green-600 border-green-500'),
        createActionButton('waiting', 'Ch·ªù m√°u', <ClockCircleOutlined />, 'WAITING', 'primary', false, 'bg-blue-500 hover:bg-blue-600 border-blue-500'),
        createActionButton('reject', 'T·ª´ ch·ªëi', <ExclamationCircleOutlined />, 'REJECTED', 'primary', true)
      );
      break;

    case 'WAITING':
      footerButtons.push(
        createActionButton('approve', 'Duy·ªát', <CheckCircleOutlined />, 'APPROVED', 'primary', false, 'bg-green-500 hover:bg-green-600 border-green-500'),
        createActionButton('reject', 'T·ª´ ch·ªëi', <ExclamationCircleOutlined />, 'REJECTED', 'primary', true)
      );
      break;

    // C√≥ th·ªÉ m·ªü r·ªông cho COMPLETED, CANCELLED v.v. n·∫øu c·∫ßn
    default:
      break;
  }

  // Lu√¥n c√≥ n√∫t ƒê√≥ng
  footerButtons.push(
    <Button key="close" onClick={handleCloseModal} className="ml-2">
      ƒê√≥ng
    </Button>
  );

  return footerButtons;
};


  return (
    <Layout style={{ minHeight: '100vh' }}>
    <Header style={{ background: '#fff', padding: '0 24px', borderBottom: '1px solid #f0f0f0' }}>
      <Row justify="space-between" align="middle">
        <Col>
          <Title level={3} style={{ margin: 0, color: '#1890ff' }}>
            <CheckCircleOutlined style={{ marginRight: 8 }} />
           Thanh to√°n
          </Title>
        </Col>
        <Col>
          <Space>
            <Text type="secondary">
              <CalendarOutlined style={{ marginRight: 4 }} />
              {new Date().toLocaleDateString('vi-VN')}
            </Text>
            <Text type="secondary">
              <UserOutlined style={{ marginRight: 4 }} />
              Qu·∫£n tr·ªã vi√™n
            </Text>
          </Space>
        </Col>
      </Row>
    </Header>

    
     <Content style={{ padding: '24px' }}>
      <Card className="mb-6 shadow-sm">
        <Row gutter={16} align="middle">
          <Col span={8}>
            <Input
              placeholder="T√¨m ki·∫øm theo t√™n b·ªánh nh√¢n..."
              prefix={<SearchOutlined />}
              value={searchText}
              onChange={(e) => setSearchText(e.target.value)}
              allowClear
            />
          </Col>
          <Col span={4}>
            <Select
              placeholder="L·ªçc theo tr·∫°ng th√°i"
              value={statusFilter}
              onChange={setStatusFilter}
              className="w-full"
              suffixIcon={<FilterOutlined />}
            >
              <Option value="all">T·∫•t c·∫£ tr·∫°ng th√°i</Option>
              <Option value="PENDING">Ch·ªù duy·ªát</Option>
              <Option value="APPROVED">ƒê√£ duy·ªát</Option>
              <Option value="REJECTED">T·ª´ ch·ªëi</Option>
              <Option value="WAITING">Ch·ªù m√°u</Option>
            </Select>
          </Col>
          <Col span={4}>
            <Select
              placeholder="L·ªçc theo th·ªùi gian"
              value={timePeriod}
              onChange={handleTimePeriodChange}
              className="w-full"
              suffixIcon={<CalendarOutlined />}
            >
              <Option value="custom">T√πy ch·ªânh</Option>
              <Option value="1week">1 tu·∫ßn qua</Option>
              <Option value="1month">1 th√°ng qua</Option>
              <Option value="1year">1 nƒÉm qua</Option>
            </Select>
          </Col>
          <Col span={4}>
            <DatePicker placeholder="Ch·ªçn ng√†y" className="w-full" />
          </Col>
          <Col span={2}>
            <Button type="primary" icon={<SearchOutlined />} className="w-full">
              T√¨m ki·∫øm
            </Button>
          </Col>
        </Row>
        {/* H√†ng th·ª© hai - Date Range Picker */}
        <Row gutter={16} align="middle" className="mt-2">
          <Col span={7}>
            <RangePicker
              placeholder={['T·ª´ ng√†y', 'ƒê·∫øn ng√†y']}
              className="w-full"
              value={dateRange}
              onChange={handleDateRangeChange}
              format="DD/MM/YYYY"
              allowClear
            />
          </Col>
          <Col span={5}>
            <Button
              onClick={handleReset}
              className="w-full"
            >
              ƒê·∫∑t l·∫°i
            </Button>
          </Col>
        </Row>

        {/* Hi·ªÉn th·ªã kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn */}
        {dateRange && (
          <Row>
            <Col span={24}>
              <div className="text-sm text-gray-600 bg-blue-50 p-3 rounded-lg border-l-4 border-blue-400">
                <CalendarOutlined className="mr-2 text-blue-600" />
                <Text strong>L·ªçc t·ª´ ng√†y:</Text> {dateRange[0].format('DD/MM/YYYY')}
                <Text strong className="mx-2">ƒë·∫øn</Text> {dateRange[1].format('DD/MM/YYYY')}
                {timePeriod !== 'custom' && (
                  <Tag color="blue" className="ml-3">
                    {timePeriod === '1week' ? '1 tu·∫ßn qua' :
                      timePeriod === '1month' ? '1 th√°ng qua' :
                        timePeriod === '1year' ? '1 nƒÉm qua' : ''}
                  </Tag>
                )}
              </div>
            </Col>
          </Row>
        )}
      </Card>

     {/* Table */}
<Card className="shadow-sm">
  <Table
    columns={columns}
    dataSource={bloodRequests}  // ‚úÖ D·ªØ li·ªáu th·∫≠t t·ª´ API
    rowKey="id"
    loading={loading}           // ‚úÖ Hi·ªÉn th·ªã loading khi ƒëang t·∫£i
    pagination={{
      total: bloodRequests.length,
      pageSize: 10,
      showSizeChanger: true,
      showQuickJumper: true,
      showTotal: (total, range) =>
        `${range[0]}-${range[1]} trong ${total} b·∫£n ghi`,
    }}
    scroll={{ x: 1000 }}
    className="custom-table"
  />
</Card>


      {/* Detail Modal */}
      <Modal
        title={
          <div className="flex items-center">
            <Badge status="processing" color="green" />
            <Text strong className="text-lg ml-2">
              Y√™u c·∫ßu #{selectedRecord?.id} - Tr·∫°ng th√°i: {statusConfig[selectedRecord?.status]?.text || selectedRecord?.status}
            </Text>
          </div>
        }
        open={modalVisible}
        onCancel={handleCloseModal}
        footer={renderModalFooter()}
        width={800}
        className="detail-modal"
      >
        {selectedRecord && (
          <div className="space-y-6">
            {/* Request Header */}
            <Card size="small" className="bg-red-50 border-red-200">
              <Title level={4} className="text-red-700 mb-3">
                <AlertOutlined className="mr-2" />
                Y√™u c·∫ßu m√°u kh·∫©n c·∫•p cho b·ªánh nh√¢n {selectedRecord.patientName} ({selectedRecord.bloodType})
              </Title>
            </Card>

            {/* Request Details */}
            <Card title="Chi ti·∫øt y√™u c·∫ßu" size="small">
              <Row gutter={[16, 16]}>
                <Col span={12}>
                  <Descriptions column={1} size="small">
                    <Descriptions.Item label="M√£ y√™u c·∫ßu">
                      <Text strong>#{selectedRecord.id}</Text>
                    </Descriptions.Item>
                    <Descriptions.Item label="Tr·∫°ng th√°i">
                      {(() => {
                        const { color, text, icon } = statusConfig[selectedRecord.status] || statusConfig.PENDING;
                        return (
                          <Tag color={color} icon={icon}>
                            {text}
                          </Tag>
                        );
                      })()}
                    </Descriptions.Item>
                    <Descriptions.Item label="M·ª©c ƒë·ªô kh·∫©n c·∫•p">
                      <Tag color="red" icon={<AlertOutlined />}>
                        KH·∫®N C·∫§P
                      </Tag>
                    </Descriptions.Item>
                    <Descriptions.Item label="M·ª©c ∆∞u ti√™n l√†m s√†ng">
                      <Badge status="error" text="RED" />
                    </Descriptions.Item>
                  </Descriptions>
                </Col>
                <Col span={12}>
                  <Descriptions column={1} size="small">
                    <Descriptions.Item label="L√Ω do">
                      {selectedRecord.reason}
                    </Descriptions.Item>
                    <Descriptions.Item label="S·ªë t√∫i y√™u c·∫ßu">
                      <Text strong>{selectedRecord.bagCount} t√∫i (200ml)</Text>
                    </Descriptions.Item>
                    <Descriptions.Item label="Th√†nh ph·∫ßn m√°u">
                      {selectedRecord.bloodComponent}
                    </Descriptions.Item>
                    <Descriptions.Item label="Lo·∫°i m√°u">
                      {selectedRecord.bloodType}
                    </Descriptions.Item>
                  </Descriptions>
                </Col>
              </Row>

              <Divider />

              <Row gutter={16}>
                <Col span={12}>
                  <Text strong>C·∫ßn ƒë·ªãnh nh√≥m ch√©o:</Text>
                  <Tag color="success" className="ml-2">C√≥</Tag>
                </Col>
                <Col span={12}>
                  <Text strong>C√≥ ph√π h·ª£p nh√≥m m√°u?:</Text>
                  <Tag color="success" className="ml-2">C√≥</Tag>
                </Col>
              </Row>
            </Card>

            {/* Requester Information */}
            <Card title="Th√¥ng tin ng∆∞·ªùi ph·ª• tr√°ch" size="small">
              <Row gutter={[16, 16]}>
                <Col span={12}>
                  <Descriptions column={1} size="small">
                    <Descriptions.Item label="H·ªç t√™n">
                      <Text strong>{selectedRecord.requester?.name}</Text>
                    </Descriptions.Item>
                  </Descriptions>
                </Col>
                <Col span={12}>
                  <Descriptions column={1} size="small">
                    <Descriptions.Item label="SƒêT ng∆∞·ªùi ph·ª• tr√°ch">
                      <Text copyable className="text-blue-600">
                        {selectedRecord.requester?.phone}
                      </Text>
                    </Descriptions.Item>
                  </Descriptions>
                </Col>
              </Row>
            </Card>

            {/* Patient Information */}
            <Card title={<><UserOutlined className="mr-2" />Th√¥ng tin b·ªánh nh√¢n</>} size="small">
              <Row gutter={[16, 16]}>
                <Col span={12}>
                  <Descriptions column={1} size="small">
                    <Descriptions.Item label="H·ªç t√™n">
                      <Text strong>{selectedRecord.patientName}</Text>
                    </Descriptions.Item>
                    <Descriptions.Item label="Tu·ªïi/Gi·ªõi t√≠nh">
                      {selectedRecord.age} / Nam
                    </Descriptions.Item>
                    <Descriptions.Item label="C√¢n n·∫∑ng">
                      {selectedRecord.weight} kg
                    </Descriptions.Item>
                  </Descriptions>
                </Col>
                <Col span={12}>
                  <Descriptions column={1} size="small">
                    <Descriptions.Item label="Nh√≥m m√°u">
                      <Tag color="red" className="font-semibold">
                        {selectedRecord.bloodType}
                      </Tag>
                    </Descriptions.Item>
                    <Descriptions.Item label="SƒêT b·ªánh nh√¢n">
                      <Text copyable className="text-blue-600">
                        {selectedRecord.phone}
                      </Text>
                    </Descriptions.Item>
                    <Descriptions.Item label="M√£ b·ªánh nh√¢n">
                      <Text strong>#{selectedRecord.donnorId}</Text>
                    </Descriptions.Item>
                  </Descriptions>
                </Col>
              </Row>
            </Card>

            {/* Notes and Alerts */}
            <Card title="Ghi ch√∫ v√† ti·ªÅn s·ª≠" size="small">
              <Space direction="vertical" className="w-full">
                <div>
                  <Tag color="orange" icon={<WarningOutlined />}>Warning Note:</Tag>
                  <Text className="ml-2">{selectedRecord.notes?.warning}</Text>
                </div>
                <div>
                  <Tag color="gold" icon={<StarOutlined />}>Special Note:</Tag>
                  <Text className="ml-2">{selectedRecord.notes?.special}</Text>
                </div>
                <div>
                  <Tag color="red" icon={<AlertOutlined />}>Emergency Note:</Tag>
                  <Text className="ml-2">{selectedRecord.notes?.emergency}</Text>
                </div>
              </Space>

              <Divider />

              <Row gutter={16}>
                <Col span={12}>
                  <Text strong>Ti·ªÅn s·ª≠ truy·ªÅn m√°u:</Text>
                  <Tag color="red" className="ml-2">Kh√¥ng</Tag>
                </Col>
                <Col span={12}>
                  <Text strong>Ph·∫£n ·ª©ng truy·ªÅn m√°u:</Text>
                  <Tag color="red" className="ml-2">Kh√¥ng</Tag>
                </Col>
              </Row>
              <Row gutter={16} className="mt-2">
                <Col span={12}>
                  <Text strong>Kh√°ng th·ªÉ b·∫•t th∆∞·ªùng:</Text>
                  <Tag color="red" className="ml-2">Kh√¥ng</Tag>
                </Col>
                <Col span={12}>
                  <Text strong>ƒêang mang thai:</Text>
                  <Tag color="red" className="ml-2">Kh√¥ng</Tag>
                </Col>
              </Row>
            </Card>

            {/* Processing Timeline */}
            <Card title={<><CalendarOutlined className="mr-2" />Th·ªùi gian x·ª≠ l√Ω</>} size="small">
              <Descriptions column={1} size="small">
                <Descriptions.Item label="Th·ªùi ƒëi·ªÉm c·∫•p m√°u">
                  {selectedRecord.processingTime?.requestTime}
                </Descriptions.Item>
                <Descriptions.Item label="Ng√†y t·∫°o y√™u c·∫ßu">
                  {selectedRecord.processingTime?.createdTime}
                </Descriptions.Item>
                <Descriptions.Item label="Ng√†y ƒë∆∞·ª£c ph√™ duy·ªát">
                  {selectedRecord.processingTime?.approvedTime}
                </Descriptions.Item>
                <Descriptions.Item label="Th·ªùi gian x·ª≠ l√Ω">
                  <Text strong className="text-green-600">
                    {selectedRecord.processingTime?.processingDuration}
                  </Text>
                </Descriptions.Item>
              </Descriptions>
            </Card>
          </div>
        )}
      </Modal>
<Modal
  open={showPaymentModal}
  onCancel={() => setShowPaymentModal(false)}
  footer={null}
  width={600}
  destroyOnClose
>
  <VnPayPaymentFormContent request={selectedRequest} selectedUnits={selectedUnits}/>
</Modal>
<Modal
  title="Ch·ªçn ƒë∆°n v·ªã m√°u"
  open={isModalOpen}
  onCancel={() => setIsModalOpen(false)}
  footer={null}
  width={1000}
>
{currentRecord && (
  <BloodUnitSelector
    id={{
      componentId: currentRecord.componentId,
      bloodTypeId: currentRecord.bloodTypeId,
      requestId: currentRecord.requestId,
    }}
    onSelect={handleUnitSelected}
  />
)}


</Modal>



      <style jsx global>{`
        .custom-table .ant-table-thead > tr > th {
          background-color: #f8fafc;
          font-weight: 600;
          border-bottom: 2px solid #e2e8f0;
        }
        
        .custom-table .ant-table-tbody > tr:hover > td {
          background-color: #f1f5f9;
        }
        
        .detail-modal .ant-modal-header {
          background: linear-gradient(90deg, #f8fafc 0%, #e2e8f0 100%);
          border-bottom: 2px solid #cbd5e1;
        }
        
        .ant-descriptions-item-label {
          font-weight: 600;
          color: #374151;
        }
      `}</style>
    </Content>
  </Layout>
  );
};
export default VnPayPaymentForm ;
